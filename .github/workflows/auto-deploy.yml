name: Auto Deploy

on:
  push:
    branches: 
      - master
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

jobs:
  auto-deploy:
    runs-on: windows-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/master' && 'staging' || 'development') }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Determine environment
      id: env
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $env = "${{ github.event.inputs.environment }}"
        } elseif ("${{ github.ref }}" -eq "refs/heads/master") {
          $env = "staging"
        } else {
          $env = "development"
        }
        
        Write-Host "Target environment: $env" -ForegroundColor Green
        echo "target=$env" >> $env:GITHUB_OUTPUT
        
    - name: Build and Package
      run: |
        Write-Host "Building and packaging for ${{ steps.env.outputs.target }}..." -ForegroundColor Green
        
        # Quick build and package
        dotnet restore
        dotnet build --configuration Release --no-restore
        
        # Create package directory
        New-Item -ItemType Directory -Path "package" -Force
        
        # Create Web Deploy package
        dotnet msbuild Todo.csproj `
          /p:Configuration=Release `
          /p:WebPublishMethod=Package `
          /p:PackageAsSingleFile=true `
          /p:PackageLocation="package/TodoApp.zip" `
          /p:IncludeSetParameters=true `
          /t:WebPublish
          
        # Copy setParameters file for target environment
        Copy-Item "parameters/setParameters.${{ steps.env.outputs.target }}.xml" "package/"
        
        Write-Host "Package created successfully!" -ForegroundColor Green
        
    - name: Deploy
      env:
        DEPLOY_USERNAME: ${{ secrets.DEPLOY_USERNAME }}
        DEPLOY_PASSWORD: ${{ secrets.DEPLOY_PASSWORD }}
        DEV_SERVER: ${{ secrets.DEV_SERVER_URL }}
        STAGING_SERVER: ${{ secrets.STAGING_SERVER_URL }}
        PROD_SERVER: ${{ secrets.PROD_SERVER_URL }}
      run: |
        $targetEnv = "${{ steps.env.outputs.target }}"
        
        # Determine server URL based on environment
        switch ($targetEnv) {
          "development" { $serverUrl = $env:DEV_SERVER }
          "staging" { $serverUrl = $env:STAGING_SERVER }
          "production" { $serverUrl = $env:PROD_SERVER }
          default { throw "Unknown environment: $targetEnv" }
        }
        
        if (-not $serverUrl) {
          throw "Server URL not configured for environment: $targetEnv"
        }
        
        Write-Host "Deploying to $targetEnv environment at $serverUrl" -ForegroundColor Green
        
        # Deploy using our script
        .\scripts\deploy-package.ps1 `
          -PackageFile "package/TodoApp.zip" `
          -Environment $targetEnv `
          -ServerUrl $serverUrl `
          -Username $env:DEPLOY_USERNAME `
          -Password $env:DEPLOY_PASSWORD `
          -SetParametersPath "package/setParameters.$targetEnv.xml"
          
        Write-Host "Deployment completed!" -ForegroundColor Green
        
    - name: Notify Success
      if: success()
      run: |
        $env = "${{ steps.env.outputs.target }}"
        Write-Host "ðŸŽ‰ Successfully deployed to $env environment!" -ForegroundColor Green
        Write-Host "Build: ${{ github.run_number }}" -ForegroundColor Gray
        Write-Host "Commit: ${{ github.sha }}" -ForegroundColor Gray 