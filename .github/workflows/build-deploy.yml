name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      server_url:
        description: 'Web Deploy Server URL (optional, uses secrets if empty)'
        required: false
        type: string
      whatif:
        description: 'Run in WhatIf mode (validation only)'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  build-deploy:
    runs-on: windows-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    # ===========================================
    # BUILD PHASE
    # ===========================================
    - name: üöÄ Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: üì¶ Restore dependencies
      run: |
        Write-Host "Restoring NuGet packages..." -ForegroundColor Green
        dotnet restore --verbosity minimal
        
    - name: üî® Build application
      run: |
        Write-Host "Building application in ${{ env.BUILD_CONFIGURATION }} configuration..." -ForegroundColor Green
        dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --verbosity minimal
        
    - name: üß™ Run tests
      run: |
        Write-Host "Running tests..." -ForegroundColor Green
        dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger "console;verbosity=minimal"
      continue-on-error: true
      
    - name: üì¶ Create Web Deploy Package
      run: |
        Write-Host "Creating Web Deploy package..." -ForegroundColor Green
        
        $packageName = "TodoApp-${{ github.run_number }}.zip"
        
        # Create deployment directory
        if (Test-Path "deployment") { Remove-Item "deployment" -Recurse -Force }
        New-Item -ItemType Directory -Path "deployment" -Force | Out-Null
        
        # Create Web Deploy package
        dotnet msbuild Todo.csproj `
          /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
          /p:Platform="Any CPU" `
          /p:WebPublishMethod=Package `
          /p:PackageAsSingleFile=true `
          /p:PackageLocation="deployment/$packageName" `
          /p:IncludeSetParameters=true `
          /p:ParametersXmlFile=Parameters.xml `
          /t:WebPublish `
          /verbosity:minimal
          
        if ($LASTEXITCODE -ne 0) {
          throw "Package creation failed with exit code $LASTEXITCODE"
        }
        
        Write-Host "‚úÖ Package created: $packageName" -ForegroundColor Green
        
    - name: üìã Prepare deployment files
      run: |
        Write-Host "Preparing deployment files..." -ForegroundColor Green
        
        # Copy all setParameters files
        Copy-Item "parameters/*.xml" "deployment/" -Verbose
        
        # Create deployment metadata
        $deploymentInfo = @{
          PackageName = "TodoApp-${{ github.run_number }}.zip"
          Version = "${{ github.run_number }}"
          BuildDate = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss UTC")
          Configuration = "${{ env.BUILD_CONFIGURATION }}"
          GitCommit = "${{ github.sha }}"
          GitRef = "${{ github.ref }}"
          WorkflowRun = "${{ github.run_id }}"
          Environment = "${{ github.event.inputs.environment }}"
          Actor = "${{ github.actor }}"
        }
        
        $deploymentInfo | ConvertTo-Json -Depth 3 | Out-File "deployment/deployment-info.json" -Encoding UTF8
        
        Write-Host "Deployment files prepared:" -ForegroundColor Green
        Get-ChildItem "deployment/" | ForEach-Object {
          $size = if ($_.Length -gt 1MB) { "$([math]::Round($_.Length/1MB, 2)) MB" } else { "$([math]::Round($_.Length/1KB, 1)) KB" }
          Write-Host "  ‚úì $($_.Name) ($size)" -ForegroundColor Gray
        }

    # ===========================================
    # DEPLOYMENT PHASE
    # ===========================================
    - name: üéØ Configure deployment target
      id: deploy-config
      run: |
        $environment = "${{ github.event.inputs.environment }}"
        $serverUrl = "${{ github.event.inputs.server_url }}"
        
        # Use environment-specific server URL from secrets if not provided
        if ([string]::IsNullOrWhiteSpace($serverUrl)) {
          switch ($environment) {
            "development" { $serverUrl = "${{ secrets.DEV_SERVER_URL }}" }
            "staging" { $serverUrl = "${{ secrets.STAGING_SERVER_URL }}" }
            "production" { $serverUrl = "${{ secrets.PROD_SERVER_URL }}" }
          }
        }
        
        if ([string]::IsNullOrWhiteSpace($serverUrl)) {
          throw "Server URL not provided and no secret found for environment: $environment"
        }
        
        Write-Host "Deployment Configuration:" -ForegroundColor Cyan
        Write-Host "  Environment: $environment" -ForegroundColor White
        Write-Host "  Server: $serverUrl" -ForegroundColor White
        Write-Host "  WhatIf Mode: ${{ github.event.inputs.whatif }}" -ForegroundColor White
        
        # Set outputs
        echo "environment=$environment" >> $env:GITHUB_OUTPUT
        echo "server_url=$serverUrl" >> $env:GITHUB_OUTPUT
        
    - name: ‚úÖ Validate deployment prerequisites
      run: |
        $environment = "${{ steps.deploy-config.outputs.environment }}"
        $packageFile = "deployment/TodoApp-${{ github.run_number }}.zip"
        $setParamsFile = "deployment/setParameters.$environment.xml"
        
        Write-Host "Validating deployment prerequisites..." -ForegroundColor Yellow
        
        # Check package file
        if (!(Test-Path $packageFile)) {
          throw "‚ùå Package file not found: $packageFile"
        }
        Write-Host "  ‚úì Package file exists: $(Split-Path $packageFile -Leaf)" -ForegroundColor Green
        
        # Check setParameters file
        if (!(Test-Path $setParamsFile)) {
          throw "‚ùå SetParameters file not found: $setParamsFile"
        }
        Write-Host "  ‚úì SetParameters file exists: $(Split-Path $setParamsFile -Leaf)" -ForegroundColor Green
        
        # Check credentials
        if (-not $env:DEPLOY_USERNAME -or -not $env:DEPLOY_PASSWORD) {
          throw "‚ùå Deployment credentials not found. Please configure DEPLOY_USERNAME and DEPLOY_PASSWORD secrets."
        }
        Write-Host "  ‚úì Deployment credentials available" -ForegroundColor Green
        
        Write-Host "‚úÖ All prerequisites validated!" -ForegroundColor Green
      env:
        DEPLOY_USERNAME: ${{ secrets.DEPLOY_USERNAME }}
        DEPLOY_PASSWORD: ${{ secrets.DEPLOY_PASSWORD }}
        
    - name: üöÄ Deploy to target environment
      env:
        DEPLOY_USERNAME: ${{ secrets.DEPLOY_USERNAME }}
        DEPLOY_PASSWORD: ${{ secrets.DEPLOY_PASSWORD }}
      run: |
        $environment = "${{ steps.deploy-config.outputs.environment }}"
        $serverUrl = "${{ steps.deploy-config.outputs.server_url }}"
        $packageFile = "deployment/TodoApp-${{ github.run_number }}.zip"
        $setParamsFile = "deployment/setParameters.$environment.xml"
        $whatif = "${{ github.event.inputs.whatif }}" -eq "true"
        
        Write-Host "üöÄ Starting deployment to $environment..." -ForegroundColor Green
        
        # Build deployment arguments
        $deployArgs = @(
          "-PackageFile", $packageFile
          "-Environment", $environment
          "-ServerUrl", $serverUrl
          "-Username", $env:DEPLOY_USERNAME
          "-Password", $env:DEPLOY_PASSWORD
          "-SetParametersPath", $setParamsFile
          "-AllowUntrusted"
          "-EnableBackup"
        )
        
        if ($whatif) {
          $deployArgs += "-WhatIf"
          Write-Host "üîç Running in WhatIf mode - no actual changes will be made" -ForegroundColor Yellow
        }
        
        # Execute deployment
        try {
          Write-Host "Executing deployment script..." -ForegroundColor Cyan
          & "./scripts/deploy-package.ps1" @deployArgs
          
          if ($whatif) {
            Write-Host "‚úÖ WhatIf deployment validation completed successfully!" -ForegroundColor Green
          } else {
            Write-Host "‚úÖ Deployment completed successfully!" -ForegroundColor Green
          }
        } catch {
          Write-Host "‚ùå Deployment failed: $($_.Exception.Message)" -ForegroundColor Red
          throw
        }
        
    - name: üîç Post-deployment validation
      if: github.event.inputs.whatif != 'true'
      run: |
        $serverUrl = "${{ steps.deploy-config.outputs.server_url }}"
        $environment = "${{ steps.deploy-config.outputs.environment }}"
        
        Write-Host "Performing post-deployment validation..." -ForegroundColor Yellow
        
        # Wait for application to stabilize
        Write-Host "Waiting for application to start..." -ForegroundColor Gray
        Start-Sleep -Seconds 45
        
        # Extract server name for HTTP check
        $serverName = $serverUrl -replace "https?://" -replace ":8172.*$"
        $appUrl = "https://$serverName/TodoApp"
        
        try {
          Write-Host "Testing application at: $appUrl" -ForegroundColor Cyan
          $response = Invoke-WebRequest -Uri $appUrl -UseBasicParsing -TimeoutSec 30 -ErrorAction Stop
          
          if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Application is responding successfully!" -ForegroundColor Green
            Write-Host "   Status: $($response.StatusCode)" -ForegroundColor Gray
            Write-Host "   Size: $($response.Content.Length) bytes" -ForegroundColor Gray
          } else {
            Write-Host "‚ö†Ô∏è Unexpected response status: $($response.StatusCode)" -ForegroundColor Yellow
          }
        } catch {
          Write-Host "‚ö†Ô∏è Application validation failed: $($_.Exception.Message)" -ForegroundColor Yellow
          Write-Host "   This may be normal if the server requires authentication or is not publicly accessible." -ForegroundColor Gray
        }
        
    - name: üìä Deployment Summary
      if: always()
      run: |
        $environment = "${{ steps.deploy-config.outputs.environment }}"
        $serverUrl = "${{ steps.deploy-config.outputs.server_url }}"
        $whatifMode = "${{ github.event.inputs.whatif }}" -eq "true"
        $jobStatus = "${{ job.status }}"
        
        Write-Host ""
        Write-Host "=" * 60 -ForegroundColor Cyan
        Write-Host "üöÄ DEPLOYMENT SUMMARY" -ForegroundColor Cyan
        Write-Host "=" * 60 -ForegroundColor Cyan
        Write-Host ""
        Write-Host "üìã Deployment Details:" -ForegroundColor White
        Write-Host "   Environment: $environment" -ForegroundColor Gray
        Write-Host "   Package: TodoApp-${{ github.run_number }}.zip" -ForegroundColor Gray
        Write-Host "   Server: $serverUrl" -ForegroundColor Gray
        Write-Host "   Build Number: ${{ github.run_number }}" -ForegroundColor Gray
        Write-Host "   Git Commit: ${{ github.sha }}" -ForegroundColor Gray
        Write-Host "   WhatIf Mode: $whatifMode" -ForegroundColor Gray
        Write-Host "   Deployed By: ${{ github.actor }}" -ForegroundColor Gray
        Write-Host ""
        
        if ($jobStatus -eq "success") {
          Write-Host "‚úÖ DEPLOYMENT SUCCESSFUL!" -ForegroundColor Green
          if (-not $whatifMode) {
            $serverName = $serverUrl -replace "https?://" -replace ":8172.*$"
            Write-Host ""
            Write-Host "üåê Application URL: https://$serverName/TodoApp" -ForegroundColor Cyan
          }
        } elseif ($jobStatus -eq "failure") {
          Write-Host "‚ùå DEPLOYMENT FAILED!" -ForegroundColor Red
          Write-Host "Please check the logs above for details." -ForegroundColor Yellow
        } else {
          Write-Host "‚ö†Ô∏è DEPLOYMENT STATUS: $jobStatus" -ForegroundColor Yellow
        }
        
        Write-Host ""
        Write-Host "=" * 60 -ForegroundColor Cyan

    # ===========================================
    # ARTIFACT MANAGEMENT
    # ===========================================
    - name: üíæ Upload deployment artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: TodoApp-Deployment-${{ github.run_number }}-${{ steps.deploy-config.outputs.environment }}
        path: deployment/
        retention-days: 30 