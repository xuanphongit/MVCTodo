name: Security Scan - OWASP & GitLeaks v8.26.0

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      max_decode_depth:
        description: 'GitLeaks decode depth (0-5)'
        required: false
        default: '2'
        type: choice
        options:
        - '0'
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
      enable_verbose:
        description: 'Enable verbose logging'
        required: false
        default: false
        type: boolean
      fail_on_vulnerabilities:
        description: 'Fail workflow on vulnerabilities'
        required: false
        default: false
        type: boolean

jobs:
  security-scan:
    name: Security Analysis
    runs-on: windows-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # GitLeaks Secret Scanning with v8.26.0 features
    - name: Run GitLeaks Secret Scan
      uses: gacts/gitleaks@v1
      id: gitleaks
      with:
        config-path: .gitleaks.toml
        version: latest
        fail-on-error: false
      continue-on-error: true

    # Upload GitLeaks SARIF results to GitHub Security tab
    - name: Upload GitLeaks SARIF to Security Tab
      if: always() && steps.gitleaks.outputs.sarif != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.gitleaks.outputs.sarif }}
        category: gitleaks
      continue-on-error: true

    # Setup Java for OWASP Dependency Check
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    # Cache OWASP Dependency Check database and NVD data
    - name: Cache OWASP Dependency Check Database
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/odc-data
          ${{ github.workspace }}/odc-data
          ${{ runner.temp }}/odc-data
          %USERPROFILE%/odc-data
        key: ${{ runner.os }}-owasp-nvd-db-${{ github.run_number }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-owasp-nvd-db-${{ github.run_number }}-
          ${{ runner.os }}-owasp-nvd-db-
          ${{ runner.os }}-owasp-db-

    # Restore NVD database cache specifically
    - name: Restore NVD Database Cache
      uses: actions/cache/restore@v4
      id: nvd-cache
      with:
        path: |
          ~/odc-data
          ${{ github.workspace }}/odc-data
          %USERPROFILE%/odc-data
        key: ${{ runner.os }}-nvd-database-${{ github.run_number }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-nvd-database-
          ${{ runner.os }}-owasp-nvd-db-
          ${{ runner.os }}-owasp-db-

    # Download and setup OWASP Dependency Check
    - name: Setup OWASP Dependency Check
      shell: powershell
      run: |
        $odcVersion = "12.1.1"
        $downloadUrl = "https://github.com/dependency-check/DependencyCheck/releases/download/v$odcVersion/dependency-check-$odcVersion-release.zip"
        $zipPath = "dependency-check.zip"
        $extractPath = "dependency-check"
        
        Write-Host "Downloading OWASP Dependency Check v$odcVersion..."
        try {
          Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath -ErrorAction Stop
          Write-Host "[SUCCESS] Download completed successfully"
        } catch {
          Write-Error "[ERROR] Failed to download OWASP Dependency Check: $_"
          exit 1
        }
        
        Write-Host "Extracting OWASP Dependency Check..."
        try {
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          Write-Host "[SUCCESS] Extraction completed successfully"
        } catch {
          Write-Error "[ERROR] Failed to extract OWASP Dependency Check: $_"
          exit 1
        }
        
        # Add to PATH
        $odcPath = Join-Path $PWD "dependency-check\dependency-check\bin"
        echo $odcPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        Write-Host "[SUCCESS] Added OWASP Dependency Check to PATH: $odcPath"

    # Run OWASP Dependency Check
    - name: Run OWASP Dependency Check
      shell: powershell
      id: owasp-scan
      run: |
        $dataDir = Join-Path $env:USERPROFILE "odc-data"
        $reportDir = "odc-reports"
        
        # Create directories if they don't exist
        if (!(Test-Path $dataDir)) { 
          New-Item -ItemType Directory -Path $dataDir -Force 
          Write-Host "[SUCCESS] Created data directory: $dataDir"
        }
        if (!(Test-Path $reportDir)) { 
          New-Item -ItemType Directory -Path $reportDir -Force 
          Write-Host "[SUCCESS] Created report directory: $reportDir"
        }
        
        Write-Host "[INFO] Starting OWASP Dependency Check scan..."
        Write-Host "[INFO] Project: Todo MVC Security Scan"
        Write-Host "[INFO] CVSS Threshold: >= 7.0 (High/Critical)"
        
        # Check cache content and validate
        $cacheFiles = Get-ChildItem -Path $dataDir -Recurse -File -ErrorAction SilentlyContinue
        if ($cacheFiles.Count -gt 0) {
          $cacheSizeMB = [math]::Round(($cacheFiles | Measure-Object -Property Length -Sum).Sum / 1MB, 2)
          Write-Host "[INFO] Found $($cacheFiles.Count) cached NVD files ($cacheSizeMB MB)"
          
          # Check if cache seems corrupted (too small for a proper NVD database)
          if ($cacheSizeMB -lt 10) {
            Write-Host "[WARNING] Cache appears corrupted or incomplete ($cacheSizeMB MB < 10 MB expected)"
            Write-Host "[INFO] Clearing corrupted cache to force fresh download..."
            Remove-Item -Path $dataDir -Recurse -Force -ErrorAction SilentlyContinue
            New-Item -ItemType Directory -Path $dataDir -Force
            Write-Host "[SUCCESS] Cleared corrupted cache, will download fresh NVD data"
          }
        } else {
          Write-Host "[INFO] No cached NVD data found - fresh download required"
        }
        
        # Show cache status
        Write-Host "[INFO] Cache Status: ${{ steps.nvd-cache.outputs.cache-hit == 'true' && 'HIT - Using cached NVD data' || 'MISS - Will download NVD data' }}"
        
        # Note about NVD API access
        Write-Host "[INFO] Using public NVD API access (no API key configured)"
        Write-Host "[INFO] Updates will be slower due to rate limiting, but fully functional"
        
        # Build the base command arguments (only supported options)
        $dependencyCheckArgs = @(
          "--project", "Todo MVC Security Scan",
          "--scan", ".",
          "--format", "ALL",
          "--out", $reportDir,
          "--data", $dataDir,
          "--enableRetired",
          "--enableExperimental",
          "--failOnCVSS", "9",
          "--exclude", "**\bin\**",
          "--exclude", "**\obj\**",
          "--exclude", "**\.git\**",
          "--exclude", "**\.vs\**",
          "--exclude", "**\node_modules\**",
          "--exclude", "**\packages\**",
          "--exclude", "**\.nuget\**",
          "--exclude", "**\TestResults\**",
          "--exclude", "**\dependency-check*",
          "--exclude", "**\odc-reports\**",
          "--exclude", "**\*.zip"
        )
        
        # First attempt: Try with NVD updates
        Write-Host "[INFO] Attempting scan with NVD database updates..."
        try {
          & dependency-check.bat @dependencyCheckArgs
          $scanResult = $LASTEXITCODE
          
          if ($scanResult -eq 0) {
            Write-Host "[SUCCESS] OWASP Dependency Check completed successfully with NVD updates"
            echo "SCAN_STATUS=success" >> $env:GITHUB_OUTPUT
            echo "VULNERABILITIES_FOUND=false" >> $env:GITHUB_OUTPUT
          } elseif ($scanResult -eq 1) {
            Write-Host "[WARNING] High-severity vulnerabilities found (CVSS >= 7.0)"
            Write-Host "[INFO] Scan completed but vulnerabilities detected"
            echo "SCAN_STATUS=success_with_vulnerabilities" >> $env:GITHUB_OUTPUT
            echo "VULNERABILITIES_FOUND=true" >> $env:GITHUB_OUTPUT
            
            # Check if we should fail the workflow
            $failOnVulns = "${{ github.event.inputs.fail_on_vulnerabilities || 'false' }}"
            if ($failOnVulns -eq 'true') {
              Write-Host "[ERROR] Workflow configured to fail on vulnerabilities"
              echo "SHOULD_FAIL=true" >> $env:GITHUB_OUTPUT
            } else {
              Write-Host "[INFO] Continuing workflow despite vulnerabilities (fail_on_vulnerabilities=false)"
              echo "SHOULD_FAIL=false" >> $env:GITHUB_OUTPUT
            }
          } else {
            throw "Dependency check failed with exit code: $scanResult"
          }
        } catch {
          Write-Host "[ERROR] First attempt failed: $_"
          
          # If database is corrupted, try clearing and re-downloading
          if ($scanResult -eq 13) {
            Write-Host "[INFO] Database corruption detected (exit code 13), clearing cache..."
            Remove-Item -Path $dataDir -Recurse -Force -ErrorAction SilentlyContinue
            New-Item -ItemType Directory -Path $dataDir -Force
            
            Write-Host "[INFO] Attempting fresh database download..."
            try {
              & dependency-check.bat @dependencyCheckArgs
              $freshResult = $LASTEXITCODE
              
              if ($freshResult -eq 0) {
                Write-Host "[SUCCESS] Fresh download successful"
                echo "SCAN_STATUS=success" >> $env:GITHUB_OUTPUT
                echo "VULNERABILITIES_FOUND=false" >> $env:GITHUB_OUTPUT
                return
              } elseif ($freshResult -eq 1) {
                Write-Host "[WARNING] High-severity vulnerabilities found after fresh download"
                echo "SCAN_STATUS=success_with_vulnerabilities" >> $env:GITHUB_OUTPUT
                echo "VULNERABILITIES_FOUND=true" >> $env:GITHUB_OUTPUT
                
                $failOnVulns = "${{ github.event.inputs.fail_on_vulnerabilities || 'false' }}"
                if ($failOnVulns -eq 'true') {
                  echo "SHOULD_FAIL=true" >> $env:GITHUB_OUTPUT
                } else {
                  echo "SHOULD_FAIL=false" >> $env:GITHUB_OUTPUT
                }
                return
              } else {
                throw "Fresh download also failed with exit code: $freshResult"
              }
            } catch {
              Write-Host "[ERROR] Fresh download failed: $_"
            }
          }
          
          Write-Host "[INFO] Attempting fallback scan without NVD updates..."
          
          # Second attempt: Skip NVD updates and use cached/local data only
          $fallbackArgs = $dependencyCheckArgs + @("--noupdate")
          
          try {
            & dependency-check.bat @fallbackArgs
            $fallbackResult = $LASTEXITCODE
            
            if ($fallbackResult -eq 0) {
              Write-Host "[SUCCESS] OWASP Dependency Check completed with cached data (NVD update failed)"
              echo "SCAN_STATUS=success_cached" >> $env:GITHUB_OUTPUT
              echo "VULNERABILITIES_FOUND=false" >> $env:GITHUB_OUTPUT
            } elseif ($fallbackResult -eq 1) {
              Write-Host "[WARNING] High-severity vulnerabilities found using cached data"
              Write-Host "[INFO] Note: Results may not include the latest vulnerability data due to NVD update failure"
              echo "SCAN_STATUS=success_cached_with_vulnerabilities" >> $env:GITHUB_OUTPUT
              echo "VULNERABILITIES_FOUND=true" >> $env:GITHUB_OUTPUT
              
              $failOnVulns = "${{ github.event.inputs.fail_on_vulnerabilities || 'false' }}"
              if ($failOnVulns -eq 'true') {
                echo "SHOULD_FAIL=true" >> $env:GITHUB_OUTPUT
              } else {
                echo "SHOULD_FAIL=false" >> $env:GITHUB_OUTPUT
              }
            } else {
              throw "Fallback scan also failed with exit code: $fallbackResult"
            }
          } catch {
            Write-Host "[ERROR] Both scan attempts failed"
            Write-Host "[ERROR] NVD API error and fallback scan error: $_"
            echo "SCAN_STATUS=failed" >> $env:GITHUB_OUTPUT
            echo "VULNERABILITIES_FOUND=unknown" >> $env:GITHUB_OUTPUT
            echo "SHOULD_FAIL=true" >> $env:GITHUB_OUTPUT
            
            # Create a manual error report
            Write-Host "[INFO] Creating error report..."
            $errorReportContent = @"
        <!DOCTYPE html>
        <html>
        <head>
            <title>OWASP Dependency Check - Scan Failed</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .header { background-color: #f8d7da; padding: 20px; border-radius: 5px; }
                .error { color: #721c24; }
                .recommendations { background-color: #d1ecf1; padding: 15px; border-radius: 5px; margin-top: 20px; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>OWASP Dependency Check Report</h1>
                <h2 class="error">Scan Status: Failed - Database Issues</h2>
            </div>
            <p><strong>Project:</strong> Todo MVC Security Scan</p>
            <p><strong>Scan Date:</strong> $((Get-Date).ToString())</p>
            <p><strong>Status:</strong> Unable to complete vulnerability scan due to NVD database corruption or connectivity issues.</p>
            <h3>Technical Details:</h3>
            <ul>
                <li><strong>Error:</strong> Multiple scan attempts failed</li>
                <li><strong>Issue:</strong> NVD database access issues</li>
                <li><strong>Cache Status:</strong> Cache restoration and fresh download both failed</li>
                <li><strong>Network:</strong> Unable to establish reliable connection to NVD services</li>
            </ul>
            <div class="recommendations">
                <h3>Immediate Actions Required:</h3>
                <ol>
                    <li><strong>Manual Review:</strong> Manually check dependencies against known vulnerability databases</li>
                    <li><strong>Network Check:</strong> Verify GitHub Actions runner can access nvd.nist.gov</li>
                    <li><strong>Re-run:</strong> Try running the scan again later</li>
                    <li><strong>Alternative Tools:</strong> Consider using Snyk, WhiteSource, or other vulnerability scanners</li>
                </ol>
                <h3>Dependencies to Check Manually:</h3>
                <ul>
                    <li>Check all NuGet packages in Todo.csproj</li>
                    <li>Review .NET version for known security issues</li>
                    <li>Validate any third-party libraries</li>
                </ul>
            </div>
        </body>
        </html>
        "@
            $errorReportPath = Join-Path $reportDir "dependency-check-report.html"
            $errorReportContent | Out-File -FilePath $errorReportPath -Encoding UTF8
            Write-Host "[INFO] Created error report: $errorReportPath"
          }
        }
        
        # Verify reports were generated
        $reportFiles = Get-ChildItem -Path $reportDir -File -ErrorAction SilentlyContinue
        if ($reportFiles.Count -gt 0) {
          Write-Host "[SUCCESS] Generated $($reportFiles.Count) report files:"
          foreach ($file in $reportFiles) {
            $sizeMB = [math]::Round($file.Length / 1MB, 2)
            Write-Host "  - $($file.Name) ($sizeMB MB)"
          }
          
          Write-Host "[INFO] Security scan completed - check reports for results"
        } else {
          Write-Host "[ERROR] No report files were generated"
          echo "SCAN_STATUS=failed" >> $env:GITHUB_OUTPUT
          echo "SHOULD_FAIL=true" >> $env:GITHUB_OUTPUT
        }

    # Save NVD cache data for future runs
    - name: Save NVD Cache Data
      if: always()
      uses: actions/cache/save@v4
      with:
        path: |
          ~/odc-data
          ${{ github.workspace }}/odc-data
          %USERPROFILE%/odc-data
        key: ${{ runner.os }}-nvd-database-${{ github.run_number }}-${{ github.sha }}

    # Upload OWASP reports as artifacts
    - name: Upload OWASP Dependency Check Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-results-${{ github.run_number }}
        path: odc-reports/
        retention-days: 30
        compression-level: 6

    # Upload GitLeaks reports as artifacts
    - name: Upload GitLeaks Results
      uses: actions/upload-artifact@v4
      if: always() && steps.gitleaks.outputs.sarif != ''
      with:
        name: gitleaks-results-${{ github.run_number }}
        path: |
          ${{ steps.gitleaks.outputs.sarif }}
          .gitleaks.toml
        retention-days: 30
        compression-level: 6

    # Sanitize SARIF file for GitHub Security upload (fix Windows path issues)
    - name: Sanitize SARIF File for GitHub Upload
      shell: powershell
      if: always() && hashFiles('odc-reports/dependency-check-report.sarif') != ''
      run: |
        $sarifPath = "odc-reports/dependency-check-report.sarif"
        $sanitizedPath = "odc-reports/dependency-check-report-sanitized.sarif"
        
        if (Test-Path $sarifPath) {
          Write-Host "[INFO] Sanitizing SARIF file for GitHub Security upload..."
          
          try {
            # Read the SARIF content
            $sarifContent = Get-Content $sarifPath -Raw -Encoding UTF8
            
            Write-Host "[INFO] Original SARIF size: $($sarifContent.Length) characters"
            Write-Host "[INFO] Fixing Windows file URI issues..."
            
            # Step 1: Fix Windows file URIs with drive letters
            # Convert file://D:\path\to\file to file:///D:/path/to/file
            $sarifContent = $sarifContent -replace 'file://([A-Z]):\\([^"]*)', 'file:///$1:/$2'
            
            # Step 2: Convert all backslashes to forward slashes in file URIs
            # This handles any remaining backslashes in the path portion
            $sarifContent = $sarifContent -replace '(file://[^"]*?)\\+', '$1/'
            
            # Step 3: Fix double forward slashes that aren't part of the protocol
            # But preserve the triple slash after file:
            $sarifContent = $sarifContent -replace 'file:////+', 'file:///'
            $sarifContent = $sarifContent -replace '(?<!file:)//', '/'
            
            # Step 4: Handle edge cases with colons in Windows paths
            # Remove any remaining instances where colons might be misinterpreted as ports
            # Pattern: file:///D:/some/path:rest -> file:///D:/some/path_rest
            $sarifContent = $sarifContent -replace '(file:///[A-Z]:/[^":]*):([^/"\s])', '$1_$2'
            
            # Step 5: More comprehensive fix for all file URI references
            # Use a more sophisticated approach to ensure proper URI encoding
            $sarifContent = $sarifContent -replace '"file://([^"]*)"', {
              param($match)
              $fullUri = $match.Groups[1].Value
              
              # If it looks like a Windows path (starts with drive letter)
              if ($fullUri -match '^([A-Z]):(.*)') {
                $drive = $matches[1]
                $path = $matches[2]
                
                # Convert backslashes to forward slashes
                $path = $path -replace '\\', '/'
                
                # Remove any colons that aren't part of the drive
                $path = $path -replace ':', '_'
                
                # Ensure we have the correct format: file:///D:/path
                $result = '"file:///' + $drive + ':' + $path + '"'
                Write-Host "[DEBUG] Converted: $($match.Value) -> $result"
                return $result
              }
              # If it already starts with file:///, just clean up backslashes and colons
              elseif ($fullUri -match '^/') {
                $cleanPath = $fullUri -replace '\\', '/' -replace '(?<!^/[A-Z]):', '_'
                return '"file://' + $cleanPath + '"'
              }
              # For other cases, ensure proper format
              else {
                $cleanPath = $fullUri -replace '\\', '/' -replace ':', '_'
                return '"file:///' + $cleanPath + '"'
              }
            }
            
            # Step 6: Final cleanup - ensure consistent URI formatting
            # Fix any malformed URIs that might have been created
            $sarifContent = $sarifContent -replace 'file:///+', 'file:///'
            $sarifContent = $sarifContent -replace 'file://([A-Z])_/', 'file:///$1:/'
            
            Write-Host "[INFO] Sanitized SARIF size: $($sarifContent.Length) characters"
            
            # Write sanitized content
            $sarifContent | Out-File -FilePath $sanitizedPath -Encoding UTF8 -NoNewline
            
            Write-Host "[SUCCESS] SARIF file sanitized successfully"
            Write-Host "[INFO] Original file: $sarifPath"
            Write-Host "[INFO] Sanitized file: $sanitizedPath"
            
            # Show sample of changes made
            $originalLines = (Get-Content $sarifPath -Raw -Encoding UTF8) -split "`n" | Where-Object { $_ -like '*file://*' } | Select-Object -First 3
            $sanitizedLines = ($sarifContent -split "`n") | Where-Object { $_ -like '*file://*' } | Select-Object -First 3
            
            if ($originalLines) {
              Write-Host "[INFO] Sample original file URIs:"
              $originalLines | ForEach-Object { Write-Host "  $($_.Trim())" }
              Write-Host "[INFO] Sample sanitized file URIs:"
              $sanitizedLines | ForEach-Object { Write-Host "  $($_.Trim())" }
            }
            
            # Validate JSON structure
            try {
              $json = $sarifContent | ConvertFrom-Json
              Write-Host "[SUCCESS] Sanitized SARIF is valid JSON"
              
              # Check if we have location URIs to validate
              $locationCount = 0
              if ($json.runs) {
                foreach ($run in $json.runs) {
                  if ($run.results) {
                    foreach ($result in $run.results) {
                      if ($result.locations) {
                        foreach ($location in $result.locations) {
                          if ($location.physicalLocation -and $location.physicalLocation.artifactLocation -and $location.physicalLocation.artifactLocation.uri) {
                            $locationCount++
                          }
                        }
                      }
                    }
                  }
                }
              }
              Write-Host "[INFO] Found $locationCount file location URIs in SARIF"
              echo "SARIF_SANITIZED=true" >> $env:GITHUB_OUTPUT
              echo "LOCATION_COUNT=$locationCount" >> $env:GITHUB_OUTPUT
              
            } catch {
              Write-Host "[WARNING] Sanitized SARIF may have JSON issues: $_"
              echo "SARIF_SANITIZED=false" >> $env:GITHUB_OUTPUT
            }
            
          } catch {
            Write-Host "[ERROR] Failed to sanitize SARIF file: $_"
            Write-Host "[INFO] Will skip GitHub Security upload due to sanitization failure"
            echo "SARIF_SANITIZED=false" >> $env:GITHUB_OUTPUT
          }
        } else {
          Write-Host "[WARNING] SARIF file not found: $sarifPath"
          echo "SARIF_SANITIZED=false" >> $env:GITHUB_OUTPUT
        }

    # Upload SARIF results to GitHub Security tab (sanitized version)
    - name: Upload OWASP SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('odc-reports/dependency-check-report-sanitized.sarif') != ''
      with:
        sarif_file: odc-reports/dependency-check-report-sanitized.sarif
        category: owasp-dependency-check
      continue-on-error: true

    # Analyze vulnerabilities and create detailed summary
    - name: Analyze Vulnerability Results
      shell: powershell
      if: always()
      id: vulnerability-analysis
      run: |
        $reportPath = "odc-reports/dependency-check-report.json"
        $vulnerabilities = @()
        $criticalCount = 0
        $highCount = 0
        $mediumCount = 0
        $lowCount = 0
        
        if (Test-Path $reportPath) {
          try {
            $report = Get-Content $reportPath -Raw | ConvertFrom-Json
            
            if ($report.dependencies) {
              foreach ($dependency in $report.dependencies) {
                if ($dependency.vulnerabilities) {
                  foreach ($vuln in $dependency.vulnerabilities) {
                    $vulnerabilities += [PSCustomObject]@{
                      CVE = $vuln.name
                      CVSS = if ($vuln.cvssv3) { $vuln.cvssv3.baseScore } else { $vuln.cvssv2.score }
                      Severity = $vuln.severity
                      Package = $dependency.fileName
                      Description = $vuln.description
                    }
                    
                    switch ($vuln.severity.ToUpper()) {
                      "CRITICAL" { $criticalCount++ }
                      "HIGH" { $highCount++ }
                      "MEDIUM" { $mediumCount++ }
                      "LOW" { $lowCount++ }
                    }
                  }
                }
              }
            }
            
            echo "CRITICAL_COUNT=$criticalCount" >> $env:GITHUB_OUTPUT
            echo "HIGH_COUNT=$highCount" >> $env:GITHUB_OUTPUT
            echo "MEDIUM_COUNT=$mediumCount" >> $env:GITHUB_OUTPUT
            echo "LOW_COUNT=$lowCount" >> $env:GITHUB_OUTPUT
            echo "TOTAL_COUNT=$($vulnerabilities.Count)" >> $env:GITHUB_OUTPUT
            
            Write-Host "[INFO] Vulnerability Analysis Complete:"
            Write-Host "  Critical: $criticalCount"
            Write-Host "  High: $highCount"
            Write-Host "  Medium: $mediumCount"
            Write-Host "  Low: $lowCount"
            Write-Host "  Total: $($vulnerabilities.Count)"
            
            # List critical and high vulnerabilities
            $highSeverityVulns = $vulnerabilities | Where-Object { $_.Severity -in @("CRITICAL", "HIGH") }
            if ($highSeverityVulns.Count -gt 0) {
              Write-Host "[WARNING] High/Critical Vulnerabilities Found:"
              foreach ($vuln in $highSeverityVulns) {
                Write-Host "  - $($vuln.CVE) ($($vuln.Severity), CVSS: $($vuln.CVSS)) in $($vuln.Package)"
              }
            }
            
          } catch {
            Write-Host "[ERROR] Failed to parse vulnerability report: $_"
            echo "CRITICAL_COUNT=unknown" >> $env:GITHUB_OUTPUT
            echo "HIGH_COUNT=unknown" >> $env:GITHUB_OUTPUT
            echo "MEDIUM_COUNT=unknown" >> $env:GITHUB_OUTPUT
            echo "LOW_COUNT=unknown" >> $env:GITHUB_OUTPUT
            echo "TOTAL_COUNT=unknown" >> $env:GITHUB_OUTPUT
          }
        } else {
          Write-Host "[WARNING] No JSON report found for analysis"
          echo "CRITICAL_COUNT=0" >> $env:GITHUB_OUTPUT
          echo "HIGH_COUNT=0" >> $env:GITHUB_OUTPUT
          echo "MEDIUM_COUNT=0" >> $env:GITHUB_OUTPUT
          echo "LOW_COUNT=0" >> $env:GITHUB_OUTPUT
          echo "TOTAL_COUNT=0" >> $env:GITHUB_OUTPUT
        }

    # Create comprehensive job summary
    - name: Create Job Summary
      shell: powershell
      if: always()
      run: |
        Write-Host "Creating comprehensive job summary..."
        
        # Get scan results
        $scanStatus = "${{ steps.owasp-scan.outputs.SCAN_STATUS || 'unknown' }}"
        $vulnerabilitiesFound = "${{ steps.owasp-scan.outputs.VULNERABILITIES_FOUND || 'unknown' }}"
        $shouldFail = "${{ steps.owasp-scan.outputs.SHOULD_FAIL || 'false' }}"
        
        # Get vulnerability counts
        $criticalCount = "${{ steps.vulnerability-analysis.outputs.CRITICAL_COUNT || '0' }}"
        $highCount = "${{ steps.vulnerability-analysis.outputs.HIGH_COUNT || '0' }}"
        $mediumCount = "${{ steps.vulnerability-analysis.outputs.MEDIUM_COUNT || '0' }}"
        $lowCount = "${{ steps.vulnerability-analysis.outputs.LOW_COUNT || '0' }}"
        $totalCount = "${{ steps.vulnerability-analysis.outputs.TOTAL_COUNT || '0' }}"
        
        # Check if files exist
        $gitleaksExists = if ("${{ steps.gitleaks.outputs.sarif }}" -ne "") { Test-Path "${{ steps.gitleaks.outputs.sarif }}" } else { $false }
        $owaspExists = Test-Path "odc-reports"
        
        # Determine status indicators
        $gitleaksStatus = if ($gitleaksExists) { "✅ Completed" } else { "⚠️ No results" }
        $owaspStatus = switch ($scanStatus) {
          "success" { "✅ Completed - No High/Critical Vulnerabilities" }
          "success_with_vulnerabilities" { "⚠️ Completed - Vulnerabilities Found" }
          "success_cached" { "✅ Completed with Cached Data" }
          "success_cached_with_vulnerabilities" { "⚠️ Completed with Cached Data - Vulnerabilities Found" }
          "failed" { "❌ Failed" }
          default { "❓ Unknown Status" }
        }
        
        # Get decode depth from inputs
        $decodeDepth = "${{ github.event.inputs.max_decode_depth || '2' }}"
        $verboseMode = "${{ github.event.inputs.enable_verbose || 'false' }}"
        $failOnVulns = "${{ github.event.inputs.fail_on_vulnerabilities || 'false' }}"
        
        $summary = @"
        ## 🔒 Security Scan Results - Run #${{ github.run_number }}
        
        ### 🔍 GitLeaks v8.26.0 Secret Scanning $gitleaksStatus
        - **Status**: $gitleaksStatus
        - **Scope**: Full repository history
        - **Action**: gacts/gitleaks@v1 (Windows-compatible, no license required)
        - **Configuration**: .NET-optimized with stopwords for performance
        - **Features**: 
          - Advanced pattern detection with v8.26.0 syntax
          - SARIF report generated for Security tab
          - .NET-specific rules and exclusions
          - Enhanced performance with modern allowlists
        
        ### 🛡️ OWASP Dependency Check v12.1.1 $owaspStatus
        - **Status**: $owaspStatus
        - **Version**: v12.1.1 (Latest)
        - **Project**: Todo MVC Security Scan
        - **Fail Threshold**: CVSS Score >= 7.0 (High/Critical)
        - **NVD API**: Public Access (Rate Limited - Testing without API key)
        
        ### 📊 Vulnerability Summary
        - **Critical**: $criticalCount vulnerabilities
        - **High**: $highCount vulnerabilities  
        - **Medium**: $mediumCount vulnerabilities
        - **Low**: $lowCount vulnerabilities
        - **Total**: $totalCount vulnerabilities found
        
        ### 📋 Reports Generated
        - HTML Report (human-readable)
        - JSON Report (machine-readable)
        - XML Report (integration)
        - SARIF Report (uploaded to Security tab)
        - GitLab JSON Report (CI/CD integration)
        - JUnit XML Report (test integration)
        - CSV Report (spreadsheet analysis)
        
        ### 🎯 View Results
        - **Security Tab**: Navigate to Security → Code scanning alerts
        - **Artifacts**: Download scan results from this workflow run
        - **GitLeaks Logs**: Review secret detection details in workflow logs
        - **OWASP Reports**: Download detailed vulnerability reports
        
        ### ⚙️ Workflow Configuration
        - **Manual Trigger**: Use 'Run workflow' button for custom scans
        - **Configuration**: Custom .gitleaks.toml with .NET optimizations
        - **Scheduling**: Automatic weekly scans on Sundays
        - **Fail on Vulnerabilities**: $failOnVulns
        - **SARIF Processing**: Converts Windows file URIs (file://D:\path) to GitHub-compatible format (file:///D:/path)
        
        ### 🚨 Next Steps
        If vulnerabilities or secrets are found:
        1. 📋 Review the detailed reports in Security tab
        2. 📥 Download artifacts for offline analysis
        3. 🔄 Update vulnerable dependencies immediately
        4. 🔐 Rotate any exposed secrets
        5. 🛡️ Apply security patches
        6. ♻️ Re-run the security scan to verify fixes
        
        ### 🔧 Known Issues & Fixes
        
        **CVE-2025-48734 (commons-beanutils-1.9.4.jar)**
        - **Severity**: High (CVSS 8.8)
        - **Component**: Apache Commons BeanUtils 1.9.4
        - **Fix**: Upgrade to commons-beanutils 1.11.0 or later
        - **Root Cause**: Transitive dependency via Microsoft.VisualStudio.Web.CodeGeneration packages
        - **Action**: Update or remove Microsoft.VisualStudio.Web.CodeGeneration.Design package
        
        ### 📚 Resources
        - [GitLeaks Documentation](https://github.com/gitleaks/gitleaks)
        - [OWASP Dependency Check](https://owasp.org/www-project-dependency-check/)
        - [Vulnerability Database](https://nvd.nist.gov/)
        - [.NET Security Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/security/)
        - [CVE-2025-48734 Details](https://nvd.nist.gov/vuln/detail/CVE-2025-48734)
        
        ### 🔧 Workflow Configuration
        - **Config Files**: \`.gitleaks.toml\`, workflow in \`.github/workflows/security-scan.yml\`
        - **Caching**: Enabled for faster scans
        - **Reporting**: SARIF format uploaded to Security tab
        - **Retention**: Artifacts available for 30 days
        
        ---
        
        **⚠️ This issue was automatically created by the Security Scan workflow. Do not close until all vulnerabilities are resolved and verified.**
        
        **🤖 Automation**: This workflow runs on every push, PR, and weekly schedule.
        `;
        
        echo $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
        Write-Host "[SUCCESS] Job summary created successfully"

    # Fail the job if vulnerabilities found and configured to fail
    - name: Check if Workflow Should Fail
      if: always() && steps.owasp-scan.outputs.SHOULD_FAIL == 'true'
      shell: powershell
      run: |
        Write-Host "[ERROR] Security scan completed but found high-severity vulnerabilities or critical errors"
        Write-Host "[ERROR] Failing workflow as requested (fail_on_vulnerabilities=true or scan failed)"
        exit 1

  # Enhanced vulnerability notification with vulnerability details
  notify-on-vulnerabilities:
    name: Security Alert Notification
    runs-on: windows-latest
    needs: security-scan
    if: always() && (failure() || needs.security-scan.outputs.VULNERABILITIES_FOUND == 'true')
    
    permissions:
      issues: write
      contents: read
    
    steps:
    - name: Create Detailed Security Issue
      uses: actions/github-script@v7
      with:
        script: |
          const runNumber = context.runNumber;
          const runId = context.runId;
          const sha = context.sha.substring(0, 7);
          const branch = context.ref.replace('refs/heads/', '');
          const actor = context.actor;
          
          // Get vulnerability counts from the previous job
          const criticalCount = "${{ needs.security-scan.outputs.CRITICAL_COUNT || '0' }}";
          const highCount = "${{ needs.security-scan.outputs.HIGH_COUNT || '0' }}";
          const mediumCount = "${{ needs.security-scan.outputs.MEDIUM_COUNT || '0' }}";
          const lowCount = "${{ needs.security-scan.outputs.LOW_COUNT || '0' }}";
          const totalCount = "${{ needs.security-scan.outputs.TOTAL_COUNT || '0' }}";
          
          const title = `🚨 Security Vulnerabilities Detected - Run #${runNumber}`;
          const body = `
          ## 🔴 Security Alert - Immediate Action Required
          
          High severity vulnerabilities (CVSS ≥ 7.0) or exposed secrets have been detected in the repository.
          
          ### 📊 Vulnerability Summary
          - **Critical**: ${criticalCount} vulnerabilities
          - **High**: ${highCount} vulnerabilities
          - **Medium**: ${mediumCount} vulnerabilities
          - **Low**: ${lowCount} vulnerabilities
          - **Total**: ${totalCount} vulnerabilities found
          
          ### 📋 Scan Details
          - **Run ID**: [${runId}](${context.payload.repository.html_url}/actions/runs/${runId})
          - **Branch**: \`${branch}\`
          - **Commit**: \`${sha}\`
          - **Triggered by**: @${actor}
          - **Timestamp**: ${new Date().toISOString()}
          
          ### 🔍 What Was Scanned
          - ✅ **GitLeaks v8.26.0**: Secret detection with .NET optimizations
          - ✅ **OWASP Dependency Check v12.1**: Vulnerability analysis
          - ✅ **Full Repository History**: Complete git history scan
          - ✅ **.NET Optimized Config**: Custom rules for .NET applications
          
          ### 🚨 Required Actions
          
          #### Immediate (< 1 hour)
          1. 🔒 **Review Security Tab**: Go to [Security → Code scanning alerts](${context.payload.repository.html_url}/security/code-scanning)
          2. 📥 **Download Reports**: Get detailed reports from [workflow artifacts](${context.payload.repository.html_url}/actions/runs/${runId})
          3. 🔐 **Rotate Secrets**: If secrets are detected, rotate them immediately
          4. 🚫 **Block Deployment**: Halt any deployments until issues are resolved
          
          #### Short Term (< 24 hours)
          1. 📊 **Analyze Reports**: Review OWASP HTML/JSON reports for vulnerability details
          2. 🔄 **Update Dependencies**: Upgrade packages with known vulnerabilities
          3. 🛡️ **Apply Patches**: Install security updates for affected components
          4. 🧪 **Test Changes**: Verify fixes don't break functionality
          
          #### Follow-up (< 1 week)
          1. ♻️ **Re-run Scan**: Execute workflow again to verify all issues resolved
          2. 📝 **Document Fixes**: Update security documentation with remediation steps
          3. 🎯 **Review Process**: Assess how vulnerabilities were introduced
          4. 🔒 **Strengthen Pipeline**: Consider additional security measures
          
          ### 🔧 Known Issues & Fixes
          
          **CVE-2025-48734 (commons-beanutils-1.9.4.jar)**
          - **Severity**: High (CVSS 8.8)
          - **Component**: Apache Commons BeanUtils 1.9.4
          - **Fix**: Upgrade to commons-beanutils 1.11.0 or later
          - **Root Cause**: Transitive dependency via Microsoft.VisualStudio.Web.CodeGeneration packages
          - **Action**: Update or remove Microsoft.VisualStudio.Web.CodeGeneration.Design package
          
          ### 📚 Resources
          - [GitLeaks Documentation](https://github.com/gitleaks/gitleaks)
          - [OWASP Dependency Check](https://owasp.org/www-project-dependency-check/)
          - [Vulnerability Database](https://nvd.nist.gov/)
          - [.NET Security Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/security/)
          - [CVE-2025-48734 Details](https://nvd.nist.gov/vuln/detail/CVE-2025-48734)
          
          ### 🔧 Workflow Configuration
          - **Config Files**: \`.gitleaks.toml\`, workflow in \`.github/workflows/security-scan.yml\`
          - **Caching**: Enabled for faster scans
          - **Reporting**: SARIF format uploaded to Security tab
          - **Retention**: Artifacts available for 30 days
          
          ---
          
          **⚠️ This issue was automatically created by the Security Scan workflow. Do not close until all vulnerabilities are resolved and verified.**
          
          **🤖 Automation**: This workflow runs on every push, PR, and weekly schedule.
          `;
          
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'vulnerability', 'high-priority', 'automated']
          });
          
          console.log(`Created security issue #${issue.data.number}`);
          
          // Also create a comment with quick action checklist
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.data.number,
            body: `## ✅ Security Response Checklist
            
            ### Critical Vulnerabilities
            - [ ] CVE-2025-48734: Update commons-beanutils to 1.11.0+
            - [ ] Review Microsoft.VisualStudio.Web.CodeGeneration.Design usage
            - [ ] Check for other transitive dependency vulnerabilities
            
            ### General Response
            - [ ] Reviewed Security tab alerts
            - [ ] Downloaded and analyzed reports
            - [ ] Rotated any exposed secrets
            - [ ] Updated vulnerable dependencies
            - [ ] Applied security patches
            - [ ] Tested fixes in development
            - [ ] Re-ran security scan
            - [ ] Verified all issues resolved
            - [ ] Updated security documentation
            
            **Assign this issue to security team members and check off items as completed.**`
          }); 