name: Security Scan - OWASP & GitLeaks v8.26.0

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      max_decode_depth:
        description: 'GitLeaks decode depth (0-5)'
        required: false
        default: '2'
        type: choice
        options:
        - '0'
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
      enable_verbose:
        description: 'Enable verbose logging'
        required: false
        default: false
        type: boolean

jobs:
  security-scan:
    name: Security Analysis
    runs-on: windows-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Validate GitLeaks configuration
    - name: Validate GitLeaks Configuration
      uses: gacts/gitleaks@v1
      with:
        config-path: .gitleaks.toml
        run: false
      continue-on-error: false

    # GitLeaks Secret Scanning with v8.26.0 features
    - name: Run GitLeaks Secret Scan
      uses: gacts/gitleaks@v1
      id: gitleaks
      with:
        config-path: .gitleaks.toml
        version: latest
        fail-on-error: false
      continue-on-error: true

    # Upload GitLeaks SARIF results to GitHub Security tab
    - name: Upload GitLeaks SARIF to Security Tab
      if: always() && steps.gitleaks.outputs.sarif != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.gitleaks.outputs.sarif }}
        category: gitleaks
      continue-on-error: true

    # Setup .NET for project analysis
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Cache NuGet packages
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Restore .NET dependencies
    - name: Restore dependencies
      run: dotnet restore Todo.csproj

    # Cache OWASP Dependency Check database
    - name: Cache OWASP Dependency Check Database
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/odc-data
          ${{ github.workspace }}/odc-data
        key: ${{ runner.os }}-owasp-db-${{ hashFiles('**/*.csproj') }}-v12.1.1
        restore-keys: |
          ${{ runner.os }}-owasp-db-${{ hashFiles('**/*.csproj') }}-
          ${{ runner.os }}-owasp-db-

    # Setup Java for OWASP Dependency Check
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    # Download and setup OWASP Dependency Check
    - name: Setup OWASP Dependency Check
      shell: powershell
      run: |
        $odcVersion = "12.1.1"
        $downloadUrl = "https://github.com/dependency-check/DependencyCheck/releases/download/v$odcVersion/dependency-check-$odcVersion-release.zip"
        $zipPath = "dependency-check.zip"
        $extractPath = "dependency-check"
        
        Write-Host "Downloading OWASP Dependency Check v$odcVersion..."
        try {
          Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath -ErrorAction Stop
          Write-Host "‚úÖ Download completed successfully"
        } catch {
          Write-Error "‚ùå Failed to download OWASP Dependency Check: $_"
          exit 1
        }
        
        Write-Host "Extracting OWASP Dependency Check..."
        try {
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          Write-Host "‚úÖ Extraction completed successfully"
        } catch {
          Write-Error "‚ùå Failed to extract OWASP Dependency Check: $_"
          exit 1
        }
        
        # Add to PATH
        $odcPath = Join-Path $PWD "dependency-check\dependency-check\bin"
        echo $odcPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        Write-Host "‚úÖ Added OWASP Dependency Check to PATH: $odcPath"

    # Run OWASP Dependency Check
    - name: Run OWASP Dependency Check
      shell: powershell
      run: |
        $dataDir = Join-Path $env:USERPROFILE "odc-data"
        $reportDir = "odc-reports"
        
        # Create directories if they don't exist
        if (!(Test-Path $dataDir)) { 
          New-Item -ItemType Directory -Path $dataDir -Force 
          Write-Host "‚úÖ Created data directory: $dataDir"
        }
        if (!(Test-Path $reportDir)) { 
          New-Item -ItemType Directory -Path $reportDir -Force 
          Write-Host "‚úÖ Created report directory: $reportDir"
        }
        
        Write-Host "üîç Starting OWASP Dependency Check scan..."
        Write-Host "üìä Project: Todo MVC Security Scan"
        Write-Host "üéØ CVSS Threshold: ‚â• 7.0 (High/Critical)"
        
        try {
          & dependency-check.bat `
            --project "Todo MVC Security Scan" `
            --scan "." `
            --format "ALL" `
            --out $reportDir `
            --data $dataDir `
            --enableRetired `
            --enableExperimental `
            --failOnCVSS 7 `
            --exclude "**\bin\**" `
            --exclude "**\obj\**" `
            --exclude "**\.git\**" `
            --exclude "**\.vs\**" `
            --exclude "**\node_modules\**" `
            --exclude "**\packages\**" `
            --exclude "**\.nuget\**" `
            --exclude "**\TestResults\**"
            
          Write-Host "‚úÖ OWASP Dependency Check completed successfully"
        } catch {
          Write-Host "‚ùå OWASP Dependency Check failed or found high-severity vulnerabilities"
          Write-Host "üîç Check the reports for detailed vulnerability information"
          # Don't exit here - let the workflow continue to upload reports
        }

    # Upload OWASP reports as artifacts
    - name: Upload OWASP Dependency Check Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-results-${{ github.run_number }}
        path: odc-reports/
        retention-days: 30
        compression-level: 6

    # Upload GitLeaks reports as artifacts
    - name: Upload GitLeaks Results
      uses: actions/upload-artifact@v4
      if: always() && steps.gitleaks.outputs.sarif != ''
      with:
        name: gitleaks-results-${{ github.run_number }}
        path: |
          ${{ steps.gitleaks.outputs.sarif }}
          .gitleaks.toml
        retention-days: 30
        compression-level: 6

    # Upload SARIF results to GitHub Security tab
    - name: Upload OWASP SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('odc-reports/dependency-check-report.sarif') != ''
      with:
        sarif_file: odc-reports/dependency-check-report.sarif
        category: owasp-dependency-check
      continue-on-error: true

    # Create comprehensive job summary
    - name: Create Job Summary
      shell: powershell
      if: always()
      run: |
        Write-Host "Creating comprehensive job summary..."
        
        # Check if files exist
        $gitleaksExists = if ("${{ steps.gitleaks.outputs.sarif }}" -ne "") { Test-Path "${{ steps.gitleaks.outputs.sarif }}" } else { $false }
        $owaspExists = Test-Path "odc-reports"
        
        # Determine GitLeaks status
        $gitleaksStatus = if ($gitleaksExists) { "‚úÖ Completed" } else { "‚ö†Ô∏è No results" }
        $owaspStatus = if ($owaspExists) { "‚úÖ Completed" } else { "‚ùå Failed" }
        
        # Get decode depth from inputs
        $decodeDepth = "${{ github.event.inputs.max_decode_depth || '2' }}"
        $verboseMode = "${{ github.event.inputs.enable_verbose || 'false' }}"
        
        $summary = @"
        ## üîí Security Scan Results - Run #${{ github.run_number }}
        
        ### GitLeaks v8.26.0 Secret Scanning $gitleaksStatus
        - **Status**: $gitleaksStatus
        - **Scope**: Full repository history
        - **Action**: gacts/gitleaks@v1 (Windows-compatible, no license required)
        - **Configuration**: .NET-optimized with stopwords for performance
        - **Features**: 
          - üîç Advanced pattern detection with v8.26.0 syntax
          - üìã SARIF report generated for Security tab
          - üéØ .NET-specific rules and exclusions
          - üöÄ Enhanced performance with modern allowlists
        
        ### OWASP Dependency Check v12.1.1 $owaspStatus
        - **Status**: $owaspStatus
        - **Version**: v12.1.1 (Latest)
        - **Project**: Todo MVC Security Scan
        - **Fail Threshold**: CVSS Score ‚â• 7.0 (High/Critical)
        - **Reports Generated**: 
          - üìÑ HTML Report (human-readable)
          - üìä JSON Report (machine-readable)
          - üìã XML Report (integration)
          - üîí SARIF Report (uploaded to Security tab)
        
        ### üìä View Results
        - üîí **Security Tab**: Navigate to Security ‚Üí Code scanning alerts
        - üìÅ **Artifacts**: Download scan results from this workflow run
        - üìù **GitLeaks Logs**: Review secret detection details in workflow logs
        - üìà **OWASP Reports**: Download detailed vulnerability reports
        
        ### üéÆ Workflow Controls
        - **Manual Trigger**: Use 'Run workflow' button for custom scans
        - **Configuration**: Custom .gitleaks.toml with .NET optimizations
        - **Scheduling**: Automatic weekly scans on Sundays
        
        ### üîß Next Steps
        If vulnerabilities or secrets are found:
        1. üîç Review the detailed reports in Security tab
        2. üì• Download artifacts for offline analysis
        3. üîÑ Update vulnerable dependencies immediately
        4. üîê Rotate any exposed secrets
        5. üõ°Ô∏è Apply security patches
        6. ‚ôªÔ∏è Re-run the security scan to verify fixes
        
        ### üìã Configuration
        - **GitLeaks Config**: `.gitleaks.toml` (v8.26.0 syntax)
        - **OWASP Exclusions**: Build artifacts, packages, IDE files
        - **Caching**: Enabled for faster subsequent runs
        - **Retention**: Artifacts kept for 30 days
        "@
        
        echo $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
        Write-Host "‚úÖ Job summary created successfully"

  # Enhanced vulnerability notification with more details
  notify-on-vulnerabilities:
    name: Security Alert Notification
    runs-on: windows-latest
    needs: security-scan
    if: failure()
    
    permissions:
      issues: write
      contents: read
    
    steps:
    - name: Create Detailed Security Issue
      uses: actions/github-script@v7
      with:
        script: |
          const runNumber = context.runNumber;
          const runId = context.runId;
          const sha = context.sha.substring(0, 7);
          const branch = context.ref.replace('refs/heads/', '');
          const actor = context.actor;
          
          const title = `üö® Security Vulnerabilities Detected - Run #${runNumber}`;
          const body = `
          ## üî¥ Security Alert - Immediate Action Required
          
          High severity vulnerabilities (CVSS ‚â• 7.0) or exposed secrets have been detected in the repository.
          
          ### üìä Scan Details
          - **Run ID**: [${runId}](${context.payload.repository.html_url}/actions/runs/${runId})
          - **Branch**: \`${branch}\`
          - **Commit**: \`${sha}\`
          - **Triggered by**: @${actor}
          - **Timestamp**: ${new Date().toISOString()}
          
          ### üîç What Was Scanned
          - ‚úÖ **GitLeaks v8.26.0**: Secret detection with .NET optimizations
          - ‚úÖ **OWASP Dependency Check v12.1**: Vulnerability analysis
          - ‚úÖ **Full Repository History**: Complete git history scan
          - ‚úÖ **.NET Optimized Config**: Custom rules for .NET applications
          
          ### üö® Required Actions
          
          #### Immediate (< 1 hour)
          1. üîí **Review Security Tab**: Go to [Security ‚Üí Code scanning alerts](${context.payload.repository.html_url}/security/code-scanning)
          2. üì• **Download Reports**: Get detailed reports from [workflow artifacts](${context.payload.repository.html_url}/actions/runs/${runId})
          3. üîê **Rotate Secrets**: If secrets are detected, rotate them immediately
          4. üö´ **Block Deployment**: Halt any deployments until issues are resolved
          
          #### Short Term (< 24 hours)
          1. üìä **Analyze Reports**: Review OWASP HTML/JSON reports for vulnerability details
          2. üîÑ **Update Dependencies**: Upgrade packages with known vulnerabilities
          3. üõ°Ô∏è **Apply Patches**: Install security updates for affected components
          4. üß™ **Test Changes**: Verify fixes don't break functionality
          
          #### Follow-up (< 1 week)
          1. ‚ôªÔ∏è **Re-run Scan**: Execute workflow again to verify all issues resolved
          2. üìù **Document Fixes**: Update security documentation with remediation steps
          3. üéØ **Review Process**: Assess how vulnerabilities were introduced
          4. üîí **Strengthen Pipeline**: Consider additional security measures
          
          ### üìö Resources
          - [GitLeaks Documentation](https://github.com/gitleaks/gitleaks)
          - [OWASP Dependency Check](https://owasp.org/www-project-dependency-check/)
          - [Vulnerability Database](https://nvd.nist.gov/)
          - [.NET Security Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/security/)
          
          ### üîß Workflow Configuration
          - **Config Files**: \`.gitleaks.toml\`, workflow in \`.github/workflows/security-scan.yml\`
          - **Caching**: Enabled for faster scans
          - **Reporting**: SARIF format uploaded to Security tab
          - **Retention**: Artifacts available for 30 days
          
          ---
          
          **‚ö†Ô∏è This issue was automatically created by the Security Scan workflow. Do not close until all vulnerabilities are resolved and verified.**
          
          **ü§ñ Automation**: This workflow runs on every push, PR, and weekly schedule.
          `;
          
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'vulnerability', 'high-priority', 'automated']
          });
          
          console.log(`Created security issue #${issue.data.number}`);
          
          // Also create a comment with quick action checklist
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.data.number,
            body: `## ‚úÖ Security Response Checklist
            
            - [ ] Reviewed Security tab alerts
            - [ ] Downloaded and analyzed reports
            - [ ] Rotated any exposed secrets
            - [ ] Updated vulnerable dependencies
            - [ ] Applied security patches
            - [ ] Tested fixes in development
            - [ ] Re-ran security scan
            - [ ] Verified all issues resolved
            - [ ] Updated security documentation
            
            **Assign this issue to security team members and check off items as completed.**`
          }); 