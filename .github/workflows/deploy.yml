name: Deploy to VM

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production
      package_run_number:
        description: 'Build run number to deploy'
        required: true
        type: string
      server_url:
        description: 'Web Deploy Server URL'
        required: true
        type: string
      whatif:
        description: 'Run in WhatIf mode (validation only)'
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: windows-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: TodoApp-Package-${{ github.event.inputs.package_run_number }}
        path: artifacts/
        
    - name: Validate artifacts
      run: |
        Write-Host "Downloaded artifacts:" -ForegroundColor Green
        Get-ChildItem artifacts/ | ForEach-Object {
          Write-Host "  - $($_.Name) ($([math]::Round($_.Length/1MB, 2)) MB)" -ForegroundColor Gray
        }
        
        $packageFile = "artifacts/TodoApp.${{ github.event.inputs.package_run_number }}.zip"
        $setParamsFile = "artifacts/setParameters.${{ github.event.inputs.environment }}.xml"
        
        if (!(Test-Path $packageFile)) {
          throw "Package file not found: $packageFile"
        }
        
        if (!(Test-Path $setParamsFile)) {
          throw "SetParameters file not found: $setParamsFile"
        }
        
        Write-Host "Package validation successful!" -ForegroundColor Green
        
    - name: Deploy using Web Deploy
      env:
        DEPLOY_USERNAME: ${{ secrets.DEPLOY_USERNAME }}
        DEPLOY_PASSWORD: ${{ secrets.DEPLOY_PASSWORD }}
      run: |
        $packageFile = "artifacts/TodoApp.${{ github.event.inputs.package_run_number }}.zip"
        $setParamsFile = "artifacts/setParameters.${{ github.event.inputs.environment }}.xml"
        $serverUrl = "${{ github.event.inputs.server_url }}"
        $environment = "${{ github.event.inputs.environment }}"
        $whatif = $${{ github.event.inputs.whatif }}
        
        Write-Host "Starting deployment..." -ForegroundColor Green
        Write-Host "Environment: $environment" -ForegroundColor Yellow
        Write-Host "Server: $serverUrl" -ForegroundColor Yellow
        Write-Host "Package: $packageFile" -ForegroundColor Yellow
        Write-Host "SetParams: $setParamsFile" -ForegroundColor Yellow
        Write-Host "WhatIf: $whatif" -ForegroundColor Yellow
        
        # Build deployment command
        $deployArgs = @(
          "-PackageFile", $packageFile
          "-Environment", $environment
          "-ServerUrl", $serverUrl
          "-Username", $env:DEPLOY_USERNAME
          "-Password", $env:DEPLOY_PASSWORD
          "-SetParametersPath", $setParamsFile
        )
        
        if ($whatif) {
          $deployArgs += "-WhatIf"
        }
        
        # Execute deployment
        & "./scripts/deploy-package.ps1" @deployArgs
        
    - name: Post-deployment validation
      if: github.event.inputs.whatif == 'false'
      run: |
        # Wait a bit for application to start
        Start-Sleep -Seconds 30
        
        # Try to validate deployment by checking if application responds
        $serverName = "${{ github.event.inputs.server_url }}" -replace "https?://" -replace ":8172.*$"
        $appUrl = "https://$serverName/TodoApp"
        
        try {
          Write-Host "Validating deployment at: $appUrl" -ForegroundColor Yellow
          $response = Invoke-WebRequest -Uri $appUrl -UseBasicParsing -TimeoutSec 30
          if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Application is responding successfully!" -ForegroundColor Green
          } else {
            Write-Host "‚ö†Ô∏è Application responded with status: $($response.StatusCode)" -ForegroundColor Yellow
          }
        } catch {
          Write-Host "‚ö†Ô∏è Could not validate application response: $($_.Exception.Message)" -ForegroundColor Yellow
          Write-Host "This might be normal if the server is not publicly accessible." -ForegroundColor Gray
        }
        
    - name: Deployment summary
      run: |
        Write-Host "üöÄ Deployment Summary" -ForegroundColor Cyan
        Write-Host "Environment: ${{ github.event.inputs.environment }}" -ForegroundColor White
        Write-Host "Package: TodoApp.${{ github.event.inputs.package_run_number }}.zip" -ForegroundColor White
        Write-Host "Server: ${{ github.event.inputs.server_url }}" -ForegroundColor White
        Write-Host "WhatIf Mode: ${{ github.event.inputs.whatif }}" -ForegroundColor White
        
        if ("${{ github.event.inputs.whatif }}" -eq "false") {
          $serverName = "${{ github.event.inputs.server_url }}" -replace "https?://" -replace ":8172.*$"
          Write-Host "Application URL: https://$serverName/TodoApp" -ForegroundColor Green
        } 