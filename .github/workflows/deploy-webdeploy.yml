name: Deploy to IIS using Web Deploy

on:
  push:
    branches: [ "master", "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_deploy:
        description: 'Force deployment (skip health checks)'
        required: false
        default: false
        type: boolean
      web_deploy_method:
        description: 'Web Deploy Method'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - wmsvc
        - inproc

env:
  PROJECT_PATH: './Todo.csproj'
  PUBLISH_PATH: './publish'
  PACKAGE_PATH: './package'
  IIS_SITE_NAME: 'TodoMVCApp'
  IIS_APP_POOL: 'TodoMVCAppPool'
  IIS_SITE_PATH: 'C:\inetpub\wwwroot\TodoApp'
  BACKUP_PATH: 'C:\Deployments\Backups'
  WEB_DEPLOY_SERVER: 'localhost'
  WEB_DEPLOY_USERNAME: 'Administrator'  # Or IIS Manager user

jobs:
  build-and-deploy:
    name: Build and Deploy using Web Deploy
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Display Environment Info
      shell: powershell
      run: |
        Write-Host "=== Web Deploy Deployment Information ==="
        Write-Host "Runner OS: $env:RUNNER_OS"
        Write-Host "Workflow: ${{ github.workflow }}"
        Write-Host "Branch: ${{ github.ref_name }}"
        Write-Host "Commit: ${{ github.sha }}"
        Write-Host "Environment: ${{ inputs.environment || 'production' }}"
        Write-Host "Web Deploy Method: ${{ inputs.web_deploy_method || 'auto' }}"
        Write-Host "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        Write-Host "IIS Site: ${{ env.IIS_SITE_NAME }}"
        Write-Host "IIS Path: ${{ env.IIS_SITE_PATH }}"
        Write-Host "============================================="

    - name: Check Web Deploy Installation
      shell: powershell
      run: |
        Write-Host "=== CHECKING WEB DEPLOY INSTALLATION ==="
        
        # Check if Web Deploy is installed
        $webDeployPath = "${env:ProgramFiles}\IIS\Microsoft Web Deploy V3\msdeploy.exe"
        $webDeployPath32 = "${env:ProgramFiles(x86)}\IIS\Microsoft Web Deploy V3\msdeploy.exe"
        
        $msdeployPath = $null
        if (Test-Path $webDeployPath) {
          $msdeployPath = $webDeployPath
          Write-Host "[SUCCESS] Web Deploy V3 found at: $webDeployPath"
        } elseif (Test-Path $webDeployPath32) {
          $msdeployPath = $webDeployPath32
          Write-Host "[SUCCESS] Web Deploy V3 found at: $webDeployPath32"
        } else {
          Write-Host "[ERROR] Web Deploy V3 not found!"
          Write-Host ""
          Write-Host "Please install Web Deploy V3:"
          Write-Host "1. Download from: https://www.microsoft.com/en-us/download/details.aspx?id=43717"
          Write-Host "2. Or use Chocolatey: choco install webdeploy"
          Write-Host "3. Or use Web Platform Installer"
          Write-Host ""
          throw "Web Deploy V3 is required for this deployment method"
        }
        
        # Get Web Deploy version
        try {
          $version = & "$msdeployPath" -version 2>&1 | Select-String "Microsoft Web Deploy" | Select-Object -First 1
          Write-Host "[INFO] $version"
        } catch {
          Write-Warning "[WARNING] Could not get Web Deploy version: $($_.Exception.Message)"
        }
        
        # Set environment variable for later steps
        Write-Host "##vso[task.setvariable variable=MSDEPLOY_PATH]$msdeployPath"
        $env:MSDEPLOY_PATH = $msdeployPath
        
        # Check .NET installation
        try {
          $dotnetVersion = dotnet --version
          Write-Host "[SUCCESS] .NET SDK Version: $dotnetVersion"
        } catch {
          Write-Error "[ERROR] .NET SDK not found. Please install .NET 8.0 SDK"
          throw "Missing .NET SDK"
        }
        
        Write-Host "[SUCCESS] Prerequisites check completed"

    - name: Restore dependencies
      shell: powershell
      run: |
        Write-Host "Restoring NuGet packages..."
        dotnet restore ${{ env.PROJECT_PATH }}
        if ($LASTEXITCODE -ne 0) {
          throw "Package restore failed"
        }
        Write-Host "[SUCCESS] Package restore completed successfully"

    - name: Build application
      shell: powershell
      run: |
        Write-Host "Building application in Release mode..."
        dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
        if ($LASTEXITCODE -ne 0) {
          throw "Build failed"
        }
        Write-Host "[SUCCESS] Build completed successfully"

    - name: Run tests (if available)
      shell: powershell
      continue-on-error: true
      run: |
        Write-Host "Running tests..."
        $testProjects = Get-ChildItem -Recurse -Filter "*Test*.csproj" -File
        if ($testProjects.Count -gt 0) {
          dotnet test --configuration Release --no-build --verbosity normal
          Write-Host "[SUCCESS] Tests completed"
        } else {
          Write-Host "[INFO] No test projects found, skipping tests"
        }

    - name: Publish application for Web Deploy
      shell: powershell
      run: |
        Write-Host "=== PUBLISHING APPLICATION FOR WEB DEPLOY ==="
        
        # Clean previous publish
        if (Test-Path ${{ env.PUBLISH_PATH }}) {
          Remove-Item -Path ${{ env.PUBLISH_PATH }} -Recurse -Force
          Write-Host "Cleaned existing publish directory"
        }
        
        if (Test-Path ${{ env.PACKAGE_PATH }}) {
          Remove-Item -Path ${{ env.PACKAGE_PATH }} -Recurse -Force
          Write-Host "Cleaned existing package directory"
        }
        
        # Publish application
        Write-Host "Publishing application..."
        dotnet publish ${{ env.PROJECT_PATH }} `
          --configuration Release `
          --no-build `
          --output ${{ env.PUBLISH_PATH }} `
          --self-contained false `
          --verbosity normal
          
        if ($LASTEXITCODE -ne 0) {
          throw "Publish failed"
        }
        
        Write-Host "[SUCCESS] Application published successfully"
        
        # Create Web Deploy package using MSDeploy (more reliable method)
        Write-Host "Creating Web Deploy package..."
        
        # Create package directory
        if (!(Test-Path ${{ env.PACKAGE_PATH }})) {
          New-Item -ItemType Directory -Path ${{ env.PACKAGE_PATH }} -Force | Out-Null
          Write-Host "[INFO] Created package directory: ${{ env.PACKAGE_PATH }}"
        }
        
        # Try to find MSDeploy
        $msdeployPath = "${env:ProgramFiles}\IIS\Microsoft Web Deploy V3\msdeploy.exe"
        if (!(Test-Path $msdeployPath)) {
          $msdeployPath = "${env:ProgramFiles(x86)}\IIS\Microsoft Web Deploy V3\msdeploy.exe"
        }
        
        # Check admin privileges for package creation
        $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
        
        if (Test-Path $msdeployPath) {
          if ($isAdmin) {
            try {
              Write-Host "Using MSDeploy to create package: $msdeployPath"
              Write-Host "Source: ${{ env.PUBLISH_PATH }}"
              Write-Host "Package: ${{ env.PACKAGE_PATH }}\TodoApp.zip"
              
              & "$msdeployPath" `
                -verb:sync `
                -source:contentPath="${{ env.PUBLISH_PATH }}" `
                -dest:package="${{ env.PACKAGE_PATH }}\TodoApp.zip" `
                -verbose
                
              if ($LASTEXITCODE -eq 0 -and (Test-Path "${{ env.PACKAGE_PATH }}\TodoApp.zip")) {
                $packageInfo = Get-Item "${{ env.PACKAGE_PATH }}\TodoApp.zip"
                Write-Host "[SUCCESS] Web Deploy package created successfully"
                Write-Host "Package size: $([math]::Round($packageInfo.Length / 1MB, 2)) MB"
                Write-Host "Package location: $($packageInfo.FullName)"
              } else {
                Write-Warning "[WARNING] MSDeploy package creation failed with exit code: $LASTEXITCODE"
                Write-Host "[INFO] Will use direct folder deployment instead"
              }
            } catch {
              Write-Warning "[WARNING] MSDeploy package creation failed: $($_.Exception.Message)"
              Write-Host "[INFO] Will use direct folder deployment instead"
            }
          } else {
            Write-Host "[INFO] Skipping package creation - requires Administrator privileges"
            Write-Host "[INFO] Package creation needs admin rights to access IIS configuration"
            Write-Host "[INFO] Will use direct folder deployment instead"
          }
        } else {
          Write-Host "[INFO] MSDeploy not found, will use direct folder deployment"
          Write-Host "[INFO] Published files are ready for deployment from: ${{ env.PUBLISH_PATH }}"
        }
        
        # Show what we have for deployment
        Write-Host ""
        Write-Host "=== DEPLOYMENT ASSETS SUMMARY ==="
        Write-Host "Published files directory: ${{ env.PUBLISH_PATH }}"
        if (Test-Path "${{ env.PUBLISH_PATH }}") {
          $publishedFiles = Get-ChildItem -Path "${{ env.PUBLISH_PATH }}" -Recurse -File
          Write-Host "Published files count: $($publishedFiles.Count)"
          Write-Host "Published directory size: $([math]::Round((Get-ChildItem -Path '${{ env.PUBLISH_PATH }}' -Recurse -File | Measure-Object -Property Length -Sum).Sum / 1MB, 2)) MB"
        }
        
        if (Test-Path "${{ env.PACKAGE_PATH }}\TodoApp.zip") {
          Write-Host "Web Deploy package: ${{ env.PACKAGE_PATH }}\TodoApp.zip (AVAILABLE)"
        } else {
          Write-Host "Web Deploy package: Not created (will use folder deployment)"
        }
        Write-Host "=== END DEPLOYMENT ASSETS SUMMARY ==="

    # ================================
    # WEB DEPLOY SITE MANAGEMENT 
    # ================================
    - name: Web Deploy - Create IIS Site and App Pool
      shell: powershell
      run: |
        Write-Host "=== WEB DEPLOY - IIS SITE MANAGEMENT ==="
        
        # Check admin privileges
        $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
        Write-Host "[INFO] Running as Administrator: $isAdmin"
        
        if (!$isAdmin) {
          Write-Host "[WARNING] Web Deploy operations require Administrator privileges"
          Write-Host "[INFO] Some operations may fail or be skipped"
          Write-Host ""
          Write-Host "============================================"
          Write-Host "⚠️  ADMINISTRATOR PRIVILEGES REQUIRED"
          Write-Host "============================================"
          Write-Host ""
          Write-Host "To fix this issue, please:"
          Write-Host "1. Stop the GitHub Actions runner service:"
          Write-Host "   Stop-Service -Name 'actions.runner.*'"
          Write-Host ""
          Write-Host "2. Run PowerShell as Administrator and restart the runner:"
          Write-Host "   cd C:\actions-runner"
          Write-Host "   .\run.cmd"
          Write-Host ""
          Write-Host "3. Or install runner as service with admin privileges:"
          Write-Host "   .\svc.sh install"
          Write-Host "   .\svc.sh start"
          Write-Host ""
          Write-Host "============================================"
          Write-Host ""
          Write-Host "[INFO] Will attempt limited operations..."
        }
        
        $msdeployPath = $env:MSDEPLOY_PATH
        if (!$msdeployPath) {
          $msdeployPath = "${env:ProgramFiles}\IIS\Microsoft Web Deploy V3\msdeploy.exe"
          if (!(Test-Path $msdeployPath)) {
            $msdeployPath = "${env:ProgramFiles(x86)}\IIS\Microsoft Web Deploy V3\msdeploy.exe"
          }
        }
        
        $siteName = "${{ env.IIS_SITE_NAME }}"
        $appPoolName = "${{ env.IIS_APP_POOL }}"
        $sitePath = "${{ env.IIS_SITE_PATH }}"
        
        Write-Host "Using MSDeploy: $msdeployPath"
        
        # Create deployment directory with proper error handling
        Write-Host "Creating deployment directory: $sitePath"
        try {
          if (!(Test-Path $sitePath)) {
            if ($isAdmin) {
              New-Item -ItemType Directory -Path $sitePath -Force | Out-Null
              Write-Host "[SUCCESS] Created deployment directory: $sitePath"
            } else {
              Write-Warning "[WARNING] Cannot create directory without admin privileges"
              Write-Host "[INFO] Please create directory manually: $sitePath"
              Write-Host "[INFO] Or run the setup script as Administrator:"
              Write-Host "       .\scripts\setup-webdeploy.ps1"
              
              # Try to create in a location we might have access to
              $tempSitePath = "$env:TEMP\TodoApp"
              Write-Host "[INFO] Creating temporary directory for testing: $tempSitePath"
              New-Item -ItemType Directory -Path $tempSitePath -Force | Out-Null
              Write-Host "[SUCCESS] Temporary directory created - deployment will continue with limited functionality"
            }
          } else {
            Write-Host "[INFO] Deployment directory already exists: $sitePath"
          }
        } catch {
          Write-Warning "[WARNING] Failed to create deployment directory: $($_.Exception.Message)"
          Write-Host "[INFO] This may prevent deployment from completing successfully"
          Write-Host "[INFO] Please ensure the directory exists and has proper permissions"
        }
        
        # Create Application Pool using Web Deploy
        Write-Host "Creating/Configuring Application Pool: $appPoolName"
        $appPoolCreated = $false
        
        if ($isAdmin) {
          try {
            & "$msdeployPath" `
              -verb:sync `
              -source:appPool `
              -dest:appPool="$appPoolName",managedRuntimeVersion="",enable32BitAppOnWin64=false,processModel.identityType=ApplicationPoolIdentity `
              -verbose
              
            if ($LASTEXITCODE -eq 0) {
              Write-Host "[SUCCESS] Application pool created/configured with Web Deploy"
              $appPoolCreated = $true
            } else {
              Write-Warning "[WARNING] Application pool operation completed with warnings (exit code: $LASTEXITCODE)"
            }
          } catch {
            Write-Warning "[WARNING] Application pool creation failed: $($_.Exception.Message)"
          }
          
          # Fallback to appcmd if Web Deploy failed
          if (!$appPoolCreated) {
            try {
              Write-Host "[INFO] Attempting fallback with appcmd..."
              & "$env:SystemRoot\System32\inetsrv\appcmd.exe" add apppool /name:"$appPoolName" /managedRuntimeVersion:"" /processModel.identityType:ApplicationPoolIdentity
              if ($LASTEXITCODE -eq 0) {
                Write-Host "[SUCCESS] Application pool created with appcmd fallback"
                $appPoolCreated = $true
              }
            } catch {
              Write-Warning "[WARNING] Fallback application pool creation also failed: $($_.Exception.Message)"
            }
          }
        } else {
          Write-Host "[INFO] Skipping application pool creation - requires Administrator privileges"
          Write-Host "[INFO] Please create application pool manually in IIS Manager:"
          Write-Host "       Name: $appPoolName"
          Write-Host "       .NET CLR Version: No Managed Code"
          Write-Host "       Identity: ApplicationPoolIdentity"
        }
        
        # Create IIS Website using Web Deploy
        Write-Host "Creating/Configuring IIS Website: $siteName"
        $websiteCreated = $false
        
        if ($isAdmin -and (Test-Path $sitePath)) {
          try {
            & "$msdeployPath" `
              -verb:sync `
              -source:appHostConfig="Default Web Site" `
              -dest:appHostConfig="$siteName",computerName=localhost `
              -enableRule:AppOffline `
              -verbose
              
            # Configure site bindings and path
            & "$msdeployPath" `
              -verb:sync `
              -source:iisApp `
              -dest:iisApp="$siteName",computerName=localhost,physicalPath="$sitePath",applicationPool="$appPoolName" `
              -enableRule:AppOffline `
              -verbose
              
            if ($LASTEXITCODE -eq 0) {
              Write-Host "[SUCCESS] IIS Website created/configured with Web Deploy"
              $websiteCreated = $true
            } else {
              Write-Warning "[WARNING] Website operation completed with warnings (exit code: $LASTEXITCODE)"
            }
          } catch {
            Write-Warning "[WARNING] Website creation with Web Deploy failed: $($_.Exception.Message)"
          }
          
          # Fallback to appcmd if Web Deploy failed
          if (!$websiteCreated) {
            try {
              Write-Host "[INFO] Attempting fallback with appcmd..."
              & "$env:SystemRoot\System32\inetsrv\appcmd.exe" add site /name:"$siteName" /physicalPath:"$sitePath" /bindings:http/*:80: /applicationPool:"$appPoolName"
              if ($LASTEXITCODE -eq 0) {
                Write-Host "[SUCCESS] Website created with appcmd fallback"
                $websiteCreated = $true
              }
            } catch {
              Write-Warning "[WARNING] Fallback website creation also failed: $($_.Exception.Message)"
            }
          }
        } else {
          if (!$isAdmin) {
            Write-Host "[INFO] Skipping website creation - requires Administrator privileges"
          } else {
            Write-Host "[INFO] Skipping website creation - deployment directory does not exist"
          }
          Write-Host "[INFO] Please create website manually in IIS Manager:"
          Write-Host "       Name: $siteName"
          Write-Host "       Physical Path: $sitePath"
          Write-Host "       Application Pool: $appPoolName"
          Write-Host "       Binding: http/*:80:"
        }
        
        # Summary of IIS management results
        if (!$isAdmin) {
          Write-Host ""
          Write-Host "============================================"
          Write-Host "⚠️  MANUAL IIS SETUP REQUIRED"
          Write-Host "============================================"
          Write-Host ""
          Write-Host "Since deployment is running without Administrator privileges,"
          Write-Host "please complete the following manual setup in IIS Manager:"
          Write-Host ""
          Write-Host "1. Create Application Pool:"
          Write-Host "   - Name: $appPoolName"
          Write-Host "   - .NET CLR Version: No Managed Code"
          Write-Host "   - Identity: ApplicationPoolIdentity"
          Write-Host ""
          Write-Host "2. Create Website:"
          Write-Host "   - Name: $siteName"
          Write-Host "   - Physical Path: $sitePath"
          Write-Host "   - Application Pool: $appPoolName"
          Write-Host "   - Binding: http/*:80:"
          Write-Host ""
          Write-Host "3. Create Directory (as Administrator):"
          Write-Host "   New-Item -ItemType Directory -Path '$sitePath' -Force"
          Write-Host "   icacls '$sitePath' /grant 'IIS_IUSRS:(OI)(CI)F' /T"
          Write-Host ""
          Write-Host "4. Alternative: Run setup script as Administrator:"
          Write-Host "   .\scripts\setup-webdeploy.ps1"
          Write-Host ""
          Write-Host "============================================"
          Write-Host ""
        }
        
        Write-Host "[SUCCESS] IIS Site management completed"

    # ================================
    # WEB DEPLOY APPLICATION DEPLOYMENT
    # ================================
    - name: Create backup before deployment
      shell: powershell
      run: |
        Write-Host "=== CREATING BACKUP ==="
        
        $backupDir = "${{ env.BACKUP_PATH }}\$(Get-Date -Format 'yyyyMMdd-HHmmss')-${{ github.sha }}"
        
        if (!(Test-Path ${{ env.BACKUP_PATH }})) {
          New-Item -ItemType Directory -Path ${{ env.BACKUP_PATH }} -Force | Out-Null
          Write-Host "Created backup directory: ${{ env.BACKUP_PATH }}"
        }
        
        if (Test-Path ${{ env.IIS_SITE_PATH }}) {
          Write-Host "Backing up current deployment to: $backupDir"
          New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
          Copy-Item -Path "${{ env.IIS_SITE_PATH }}\*" -Destination $backupDir -Recurse -Force
          Write-Host "[SUCCESS] Backup created successfully"
          
          # Keep only last 5 backups
          $oldBackups = Get-ChildItem -Path ${{ env.BACKUP_PATH }} -Directory | Sort-Object CreationTime -Descending | Select-Object -Skip 5
          if ($oldBackups) {
            Write-Host "Cleaning up old backups..."
            $oldBackups | Remove-Item -Recurse -Force
            Write-Host "Removed $($oldBackups.Count) old backup(s)"
          }
        } else {
          Write-Host "[INFO] No existing deployment found, skipping backup"
        }

    - name: Web Deploy - Deploy Application
      shell: powershell
      run: |
        Write-Host "=== WEB DEPLOY - APPLICATION DEPLOYMENT ==="
        
        # Check admin privileges
        $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
        Write-Host "[INFO] Running as Administrator: $isAdmin"
        
        $msdeployPath = $env:MSDEPLOY_PATH
        if (!$msdeployPath) {
          $msdeployPath = "${env:ProgramFiles}\IIS\Microsoft Web Deploy V3\msdeploy.exe"
          if (!(Test-Path $msdeployPath)) {
            $msdeployPath = "${env:ProgramFiles(x86)}\IIS\Microsoft Web Deploy V3\msdeploy.exe"
          }
        }
        
        $siteName = "${{ env.IIS_SITE_NAME }}"
        $sourcePath = "${{ env.PUBLISH_PATH }}"
        $targetPath = "${{ env.IIS_SITE_PATH }}"
        $packagePath = "${{ env.PACKAGE_PATH }}\TodoApp.zip"
        $method = "${{ inputs.web_deploy_method || 'auto' }}"
        
        # Convert to absolute paths to avoid path resolution issues
        $sourcePath = Resolve-Path $sourcePath -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Path
        if (!$sourcePath) {
          $sourcePath = "${{ env.PUBLISH_PATH }}"
        }
        
        $packagePath = if (Test-Path "${{ env.PACKAGE_PATH }}\TodoApp.zip") {
          Resolve-Path "${{ env.PACKAGE_PATH }}\TodoApp.zip" | Select-Object -ExpandProperty Path
        } else {
          "${{ env.PACKAGE_PATH }}\TodoApp.zip"
        }
        
        Write-Host "Deployment method: $method"
        Write-Host "Source path: ${sourcePath}"
        Write-Host "Target path: ${targetPath}"
        Write-Host "Package path: ${packagePath}"
        Write-Host "Target site: $siteName"
        
        # Debug: Show current working directory and file existence
        Write-Host ""
        Write-Host "=== DEBUG INFORMATION ==="
        Write-Host "Current working directory: $(Get-Location)"
        Write-Host "Source exists: $(Test-Path $sourcePath)"
        Write-Host "Package exists: $(Test-Path $packagePath)"
        Write-Host "Target directory exists: $(Test-Path $targetPath)"
        
        if (Test-Path $sourcePath) {
          $sourceFiles = Get-ChildItem -Path $sourcePath -Recurse -File | Measure-Object
          Write-Host "Source files count: $($sourceFiles.Count)"
        }
        
        if (Test-Path $packagePath) {
          $packageInfo = Get-Item $packagePath
          Write-Host "Package size: $([math]::Round($packageInfo.Length / 1MB, 2)) MB"
        }
        Write-Host "=== END DEBUG INFORMATION ==="
        Write-Host ""
        
        # Verify source exists
        if (!(Test-Path $sourcePath)) {
          Write-Error "Source path does not exist: $sourcePath"
          throw "Source path not found"
        }
        
        # Ensure target directory exists
        if (!(Test-Path $targetPath)) {
          Write-Host "Target directory does not exist, attempting to create: ${targetPath}"
          try {
            if ($isAdmin) {
              # Create directory with full path
              New-Item -ItemType Directory -Path $targetPath -Force | Out-Null
              Write-Host "[SUCCESS] Created target directory: ${targetPath}"
              
              # Set proper permissions
              try {
                icacls $targetPath /grant "IIS_IUSRS:(OI)(CI)F" /T | Out-Null
                icacls $targetPath /grant "IUSR:(OI)(CI)R" /T | Out-Null
                Write-Host "[SUCCESS] Set IIS permissions on target directory"
              } catch {
                Write-Warning "[WARNING] Could not set permissions: $($_.Exception.Message)"
              }
            } else {
              Write-Warning "[WARNING] Cannot create target directory without admin privileges"
              Write-Host "[INFO] Please create the directory manually as Administrator:"
              Write-Host "       New-Item -ItemType Directory -Path '$targetPath' -Force"
              Write-Host "       icacls '$targetPath' /grant 'IIS_IUSRS:(OI)(CI)F' /T"
              Write-Host "       icacls '$targetPath' /grant 'IUSR:(OI)(CI)R' /T"
              Write-Host ""
              
              # Try to create in a temporary location for testing
              $tempPath = "$env:TEMP\TodoApp_Deploy_Test"
              try {
                New-Item -ItemType Directory -Path $tempPath -Force | Out-Null
                Write-Host "[INFO] Created temporary directory for testing: $tempPath"
                Write-Host "[INFO] You can manually copy files from here to IIS directory later"
                
                # Update target path to temp for this deployment
                $originalTargetPath = $targetPath
                $targetPath = $tempPath
                Write-Host "[INFO] Using temporary target path: ${targetPath}"
              } catch {
                Write-Warning "[WARNING] Could not create temporary directory: $($_.Exception.Message)"
              }
            }
          } catch {
            Write-Warning "[WARNING] Failed to create target directory: $($_.Exception.Message)"
          }
        } else {
          Write-Host "[INFO] Target directory already exists: ${targetPath}"
        }
        
        # Choose deployment method
        $deploymentSuccess = $false
        
        # Method 1: Try package deployment if package exists and we have admin rights
        if ((Test-Path $packagePath) -and $isAdmin -and ($method -eq "auto" -or $method -eq "package")) {
          Write-Host "Attempting package deployment..."
          Write-Host "Package file: ${packagePath}"
          Write-Host "Target IIS app: $siteName"
          
          try {
            # Use absolute path for package to avoid path resolution issues
            $absolutePackagePath = if ([System.IO.Path]::IsPathRooted($packagePath)) { 
              $packagePath 
            } else { 
              Join-Path (Get-Location) $packagePath 
            }
            
            Write-Host "Using absolute package path: ${absolutePackagePath}"
            
            & "$msdeployPath" `
              -verb:sync `
              -source:package="$absolutePackagePath" `
              -dest:iisApp="$siteName",computerName=localhost `
              -enableRule:AppOffline `
              -enableRule:DoNotDeleteRule `
              -allowUntrusted:true `
              -verbose
              
            if ($LASTEXITCODE -eq 0) {
              Write-Host "[SUCCESS] Package deployment completed successfully"
              $deploymentSuccess = $true
            } else {
              Write-Warning "[WARNING] Package deployment failed with exit code: $LASTEXITCODE"
            }
          } catch {
            Write-Warning "[WARNING] Package deployment failed: $($_.Exception.Message)"
          }
        } elseif (!(Test-Path $packagePath)) {
          Write-Host "[INFO] Package not found, skipping package deployment: ${packagePath}"
        } elseif (!$isAdmin) {
          Write-Host "[INFO] Skipping package deployment - requires Administrator privileges"
        }
        
        # Method 2: Direct folder sync (more reliable)
        if (!$deploymentSuccess -and (Test-Path $targetPath)) {
          Write-Host "Attempting direct folder synchronization..."
          try {
            # Stop application first if we have admin rights
            if ($isAdmin) {
              Write-Host "Taking application offline..."
              $appOfflineContent = "App is being updated. Please try again in a moment."
              $appOfflineContent | Out-File -FilePath "$targetPath\app_offline.htm" -Encoding UTF8 -Force
              Start-Sleep -Seconds 2
            }
            
            # Sync files using Web Deploy
            Write-Host "Syncing from: ${sourcePath}"
            Write-Host "Syncing to: ${targetPath}"
            
            # Use absolute paths for both source and destination
            $absoluteSourcePath = if ([System.IO.Path]::IsPathRooted($sourcePath)) { 
              $sourcePath 
            } else { 
              Join-Path (Get-Location) $sourcePath 
            }
            
            Write-Host "Using absolute source path: ${absoluteSourcePath}"
            
            & "$msdeployPath" `
              -verb:sync `
              -source:contentPath="$absoluteSourcePath" `
              -dest:contentPath="$targetPath",computerName=localhost `
              -enableRule:DoNotDeleteRule `
              -skip:Directory="\\logs$" `
              -skip:Directory="\\App_Data$" `
              -skip:File="\\app_offline\.htm$" `
              -allowUntrusted:true `
              -verbose
              
            if ($LASTEXITCODE -eq 0) {
              Write-Host "[SUCCESS] Folder synchronization completed successfully"
              $deploymentSuccess = $true
            } else {
              Write-Warning "[WARNING] Folder sync failed with exit code: $LASTEXITCODE"
            }
            
            # Remove app_offline.htm
            if ((Test-Path "$targetPath\app_offline.htm") -and $isAdmin) {
              Remove-Item "$targetPath\app_offline.htm" -Force
              Write-Host "[INFO] Application brought back online"
            }
            
          } catch {
            Write-Warning "[WARNING] Folder synchronization failed: $($_.Exception.Message)"
            
            # Remove app_offline.htm in case of failure
            if ((Test-Path "$targetPath\app_offline.htm") -and $isAdmin) {
              Remove-Item "$targetPath\app_offline.htm" -Force
            }
          }
        } elseif (!(Test-Path $targetPath)) {
          Write-Host "[INFO] Skipping Web Deploy sync - target directory does not exist: ${targetPath}"
        }
        
        # Method 3: Fallback to simple file copy
        if (!$deploymentSuccess -and (Test-Path $targetPath)) {
          Write-Host "Web Deploy methods failed, falling back to file copy..."
          try {
            # Stop IIS services if we have admin rights
            if ($isAdmin) {
              try {
                Import-Module WebAdministration -ErrorAction SilentlyContinue
                Stop-WebAppPool -Name "${{ env.IIS_APP_POOL }}" -ErrorAction SilentlyContinue
                Stop-Website -Name "$siteName" -ErrorAction SilentlyContinue
                Start-Sleep -Seconds 3
                Write-Host "[INFO] Stopped IIS services for file copy"
              } catch {
                Write-Warning "[WARNING] Could not stop IIS services: $($_.Exception.Message)"
              }
            }
            
            # Copy files
            Write-Host "Copying files from ${sourcePath} to ${targetPath}..."
            
            # Use absolute paths for file copy
            $absoluteSourcePath = if ([System.IO.Path]::IsPathRooted($sourcePath)) { 
              $sourcePath 
            } else { 
              Join-Path (Get-Location) $sourcePath 
            }
            
            Write-Host "Using absolute source path for copy: ${absoluteSourcePath}"
            
            if (Test-Path $absoluteSourcePath) {
              Copy-Item -Path "$absoluteSourcePath\*" -Destination "$targetPath" -Recurse -Force
              Write-Host "[SUCCESS] Files copied successfully"
              
              # Verify copy
              $copiedFiles = Get-ChildItem -Path $targetPath -Recurse -File | Measure-Object
              Write-Host "[INFO] Copied $($copiedFiles.Count) files to target directory"
            } else {
              Write-Error "Source path does not exist: ${absoluteSourcePath}"
              throw "Source path not found for file copy"
            }
            
            # Start IIS services if we have admin rights
            if ($isAdmin) {
              try {
                Start-WebAppPool -Name "${{ env.IIS_APP_POOL }}"
                Start-Website -Name "$siteName"
                Write-Host "[INFO] Started IIS services after file copy"
              } catch {
                Write-Warning "[WARNING] Could not start IIS services: $($_.Exception.Message)"
              }
            }
            
            Write-Host "[SUCCESS] Fallback file copy deployment completed"
            $deploymentSuccess = $true
          } catch {
            Write-Warning "[WARNING] File copy deployment failed: $($_.Exception.Message)"
          }
        } elseif (!(Test-Path $targetPath)) {
          Write-Host "[ERROR] Cannot deploy - target directory does not exist and cannot be created"
          Write-Host "[INFO] Please create the target directory manually:"
          Write-Host "       New-Item -ItemType Directory -Path '$targetPath' -Force"
          Write-Host "       icacls '$targetPath' /grant 'IIS_IUSRS:(OI)(CI)F' /T"
        }
        
        if ($deploymentSuccess) {
          Write-Host "[SUCCESS] Application deployment completed successfully"
          
          # Display deployed files
          if (Test-Path $targetPath) {
            Write-Host ""
            Write-Host "Deployed files in ${targetPath}:"
            Get-ChildItem -Path $targetPath | Select-Object Name, Length, LastWriteTime | Format-Table -AutoSize
          }
        } else {
          Write-Host ""
          Write-Host "============================================"
          Write-Host "⚠️  DEPLOYMENT FAILED"
          Write-Host "============================================"
          Write-Host ""
          Write-Host "Possible solutions:"
          Write-Host "1. Run GitHub Actions runner as Administrator"
          Write-Host "2. Create target directory manually:"
          Write-Host "   New-Item -ItemType Directory -Path '$targetPath' -Force"
          Write-Host "   icacls '$targetPath' /grant 'IIS_IUSRS:(OI)(CI)F' /T"
          Write-Host "3. Run the setup script as Administrator:"
          Write-Host "   .\scripts\setup-webdeploy.ps1"
          Write-Host "4. Use the traditional deployment workflow: deploy-iis.yml"
          Write-Host ""
          Write-Host "============================================"
          
          # Don't throw error, just warn
          Write-Warning "Deployment could not be completed due to permission or configuration issues"
          Write-Host "[INFO] Please follow the solutions above and try again"
        }

    - name: Health Check
      if: ${{ inputs.force_deploy != 'true' }}
      shell: powershell
      run: |
        Write-Host "=== HEALTH CHECK ==="
        Write-Host "Performing application health check..."
        
        $maxAttempts = 10
        $delaySeconds = 5
        $healthCheckUrl = "http://localhost"
        
        for ($i = 1; $i -le $maxAttempts; $i++) {
          try {
            Write-Host "Health check attempt $i of $maxAttempts..."
            
            $response = Invoke-WebRequest -Uri $healthCheckUrl -UseBasicParsing -TimeoutSec 30 -ErrorAction Stop
            
            if ($response.StatusCode -eq 200) {
              Write-Host "[SUCCESS] Application is healthy! Status Code: $($response.StatusCode)"
              Write-Host "Response length: $($response.Content.Length) characters"
              break
            } else {
              Write-Warning "[WARNING] Unexpected status code: $($response.StatusCode)"
            }
            
          } catch {
            Write-Warning "[WARNING] Health check attempt $i failed: $($_.Exception.Message)"
            
            if ($i -eq $maxAttempts) {
              Write-Error "Health check failed after $maxAttempts attempts"
              throw "Deployment failed health check"
            }
            
            Write-Host "Waiting $delaySeconds seconds before next attempt..."
            Start-Sleep -Seconds $delaySeconds
          }
        }

    - name: Deployment Summary
      shell: powershell
      run: |
        Write-Host "=== WEB DEPLOY DEPLOYMENT SUMMARY ==="
        Write-Host "Deployment completed successfully!"
        Write-Host ""
        Write-Host "Details:"
        Write-Host "- Method: Microsoft Web Deploy V3"
        Write-Host "- Branch: ${{ github.ref_name }}"
        Write-Host "- Commit: ${{ github.sha }}"
        Write-Host "- Environment: ${{ inputs.environment || 'production' }}"
        Write-Host "- Deploy Method: ${{ inputs.web_deploy_method || 'auto' }}"
        Write-Host "- IIS Site: ${{ env.IIS_SITE_NAME }}"
        Write-Host "- App Pool: ${{ env.IIS_APP_POOL }}"
        Write-Host "- Deploy Path: ${{ env.IIS_SITE_PATH }}"
        Write-Host "- Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        Write-Host ""
        Write-Host "Application URL: http://localhost"
        Write-Host ""
        Write-Host "[SUCCESS] Web Deploy deployment completed successfully!" 